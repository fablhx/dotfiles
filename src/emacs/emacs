;;; init.el --- Emacs configuration -*- lexical-binding: t; -*-

;; =============================================================================
;;                             Package Management
;; =============================================================================

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

;; =============================================================================
;;                           Custom Functions
;; =============================================================================

;; Multiple cursors search functions
(defun my-enable-phi-search ()
  "Enable phi-search for multiple cursors mode."
  (global-set-key (kbd "C-s") #'phi-search)
  (global-set-key (kbd "C-r") #'phi-search-backward))

(defun my-disable-phi-search ()
  "Disable phi-search and restore default search."
  (global-set-key (kbd "C-s") #'isearch-forward)
  (global-set-key (kbd "C-r") #'isearch-backward))

;; Navigation Functions
(defun my-pop-local-mark-ring ()
  "Pop to the local mark ring."
  (interactive)
  (set-mark-command t))

;; Window Management Functions
(defun my-kill-last-opened-buffer ()
  "Kill the last opened buffer and its window (useful after grep)."
  (interactive)
  (let ((win-curr (selected-window))
        (win-other (next-window)))
    (when (and win-other (not (eq win-curr win-other)))
      (select-window win-other)
      (kill-buffer-and-window)
      (select-window win-curr))))

;; Text Manipulation Functions
(defun my-renumber-list (start end &optional num)
  "Renumber the list items in the current START..END region.
If optional prefix arg NUM is given, start numbering from that number
instead of 1."
  (interactive "*r\np")
  (save-excursion
    (goto-char start)
    (let ((num (or num 1)))
      (save-match-data
        (while (re-search-forward "^\\(-* *\\)\\([0-9]+\\)" end t)
          (replace-match (concat (match-string 1) (number-to-string num)))
          (setq num (1+ num)))))))

;; Line Operations
(defun my-join-next-line ()
  "Join next line to the end of current line."
  (interactive)
  (save-excursion
    (move-end-of-line nil)
    (kill-line)
    (just-one-space)))

;; Text Processing
(defun my-sort-ilines ()
  "Sort lines ignoring case."
  (interactive)
  (let ((sort-fold-case t))
    (call-interactively #'sort-lines)))

;; Specific spelling for markdown
(defun my-ispell-setup ()
  "Setup ispell skip regions for various modes."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '("`" . "`"))
  (add-to-list 'ispell-skip-region-alist '("^```" . "```$"))
  (add-to-list 'ispell-skip-region-alist '("^#+BEGIN_SRC" . "^#+END_SRC")))

;; Error location parsing and navigation
(defvar my-open-error-location--pattern
  "\\([^:\n]+\\):\\([0-9]+\\)\\(?::\\([0-9]+\\)\\)?"
  "Regex pattern to extract filename, line, and optional column.")

(defun my-open-error-location--parse (text)
  "Parse TEXT of form filename:line[:col[:]] and return (filename line col)."
  (when (string-match my-open-error-location--pattern (string-trim text))
    (let* ((file (match-string 1 text))
           (line (string-to-number (match-string 2 text)))
           (col-str (match-string 3 text))
           (col (when col-str (string-to-number col-str))))
      (list file line col))))

(defun my-open-error-location-at-point ()
  "Open file:line:column at point. Path is resolved relative to current buffer's directory."
  (interactive)
  (let* ((line-text (thing-at-point 'line t))
         (parsed (my-open-error-location--parse line-text)))
    (if parsed
        (let* ((rel-file (nth 0 parsed))
               (line (nth 1 parsed))
               (col (nth 2 parsed))
               (base-dir (file-name-directory (or (buffer-file-name) default-directory)))
               (full-path (expand-file-name rel-file base-dir)))
          (if (file-exists-p full-path)
              (progn
                (when-let ((target-window (get-window-with-predicate
                                          (lambda (win)
                                            (not (eq win (selected-window)))))))
                  (select-window target-window))
                ;; Let advice handle positioning
                (find-file (format "%s:%d:%d" full-path line (or col 1))))
            (message "File not found: %s" full-path)))
      (message "No valid filename:line[:column] pattern found at point."))))

(defun my-find-file-noselect--advice-with-line-and-column (orig-fun filename &rest args)
  "Advice to allow find-file to open FILENAME at specific line and column."
  (save-match-data
    (let* ((parsed (my-open-error-location--parse filename))
           (clean-file (if parsed (nth 0 parsed) filename))
           (line (and parsed (nth 1 parsed)))
           (col  (and parsed (nth 2 parsed)))
           (buf (if (file-exists-p clean-file)
                    (apply orig-fun clean-file args)
                  (user-error "File not found: %s" clean-file))))
      (when (and (buffer-live-p buf) line (> line 0))
        (with-current-buffer buf
          (goto-char (point-min))
          (forward-line (1- line))
          (when (and col (> col 0))
            (move-to-column (1- col)))))
      buf)))

;; Smart window splitting
(defun my-split-window-below-and-balance ()
  "Split window below and balance all windows."
  (interactive)
  (split-window-below)
  (balance-windows))

(defun my-split-window-right-and-balance ()
  "Split window right and balance all windows."
  (interactive)
  (split-window-right)
  (balance-windows))

(defun my-delete-window-and-balance ()
  "Delete window and balance remaining windows."
  (interactive)
  (delete-window)
  (balance-windows))

;; =============================================================================
;;                           Core Emacs Settings
;; =============================================================================

(use-package emacs
  :ensure nil
  :init
  ;; Unset unwanted keybinding
  (global-unset-key (kbd "C-z"))

  :bind
  ;; Function key bindings
  ([f1] . comment-dwim)
  ([f2] . whitespace-mode)
  ;; [f3] => see ag
  ([f4] . my-pop-local-mark-ring)
  ([(shift f4)] . pop-global-mark)
  ([f5] . compile)
  ([f6] . interrupt-and-recompile)
  ([f7] . next-error)
  ([f8] . flycheck-mode)
  ([f12] . enlarge-window)

  ;; Window management with auto-balancing
  ("C-x 2" . my-split-window-below-and-balance)
  ("C-x 3" . my-split-window-right-and-balance)
  ("C-x 0" . my-delete-window-and-balance)

  :config
  ;; Path configuration
  (setq-default
   load-path (cons (expand-file-name "~/.emacs.d/elpa") load-path))

  ;; Editor behavior
  (setq-default indent-tabs-mode nil)  ; Use spaces instead of tabs
  (line-number-mode t)                 ; Show line numbers
  (column-number-mode t)               ; Show column numbers
  (menu-bar-mode t)                    ; Show menu bar
  (tool-bar-mode -1)                   ; Hide tool bar
  (transient-mark-mode t)              ; Highlight selection
  (delete-selection-mode t)            ; Delete selected text
  (fset 'yes-or-no-p 'y-or-n-p)        ; Use y/n instead of yes/no
  (global-auto-revert-mode t)          ; Auto reload changed files

  ;; Various settings
  (setq
   Buffer-menu-name-width 30
   fill-nobreak-predicate '(fill-french-nobreak-p)
   mouse-yank-at-point nil
   read-file-name-completion-ignore-case t
   require-final-newline t
   search-whitespace-regexp nil
   query-replace-highlight t)

  ;; Custom variables
  (custom-set-variables
   '(inhibit-startup-echo-area-message t)
   '(inhibit-startup-message t)
   '(make-backup-files nil)
   '(ring-bell-function 'ignore)
   '(save-abbrevs nil)
   '(search-highlight t))

  ;; Custom keybindings through minor mode
  (defvar my-keys-minor-mode-map
    (let ((map (make-sparse-keymap)))
      ;; Window movement
      (define-key map (kbd "M-<left>") #'windmove-left)
      (define-key map (kbd "M-<right>") #'windmove-right)
      (define-key map (kbd "M-<up>") #'windmove-up)
      (define-key map (kbd "M-<down>") #'windmove-down)

      ;; Text operations
      (define-key map (kbd "C-c w d") #'delete-trailing-whitespace)
      (define-key map (kbd "C-x C-k") #'my-kill-last-opened-buffer)
      (define-key map (kbd "C-c C-q") #'gen-quote-word)
      (define-key map (kbd "C-<delete>") #'my-join-next-line)
      (define-key map (kbd "C-c C-s") #'my-sort-ilines)

      ;; Open file from log
      (define-key map (kbd "C-c C-f") #'my-open-error-location-at-point)

      map)
    "my-keys-minor-mode keymap.")

  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    :init-value t
    :lighter " my-keys"
    :keymap my-keys-minor-mode-map)

  (define-globalized-minor-mode global-my-keys-minor-mode my-keys-minor-mode
    (lambda () (my-keys-minor-mode 1)))

  (global-my-keys-minor-mode 1)

  (when (fboundp 'find-file-noselect)
    (advice-add 'find-file-noselect :around #'my-find-file-noselect--advice-with-line-and-column))

;; =============================================================================
;;                           Search and Navigation
;; =============================================================================

;; Silver Searcher integration
(use-package ag
  :ensure t
  :bind
  ([f3] . ag)
  ([(shift f3)] . ag-project))

;; Parenthesis handling
(use-package paren
  :ensure t
  :config
  (show-paren-mode t)
  (custom-set-variables
   '(blink-matching-paren t)
   '(blink-matching-paren-on-screen t)
   '(show-paren-style 'expression)
   '(blink-matching-paren-dont-ignore-comments t)))

;; Multiple cursors
(use-package multiple-cursors
  :ensure t
  :bind (("C-c e l" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C->" . mc/mark-all-like-this)))

;; Search with multiple cursors
(use-package phi-search
  :ensure t
  :after multiple-cursors
  :config
  (add-hook 'multiple-cursors-mode-enabled-hook #'my-enable-phi-search)
  (add-hook 'multiple-cursors-mode-disabled-hook #'my-disable-phi-search))

;; Jump to definitions
(use-package dumb-jump
  :ensure t
  :config
  (setq dumb-jump-project-denoters
        '(".dumbjump" ".projectile" ".git" ".hg" ".fslckout"
          ".bzr" "_darcs" ".svn" "PkgInfo" "-pkg.el")
        dumb-jump-prefer-searcher 'ag))
  :hook ((prog-mode . dumb-jump-mode)
         ('xref-backend-functions . #'dumb-jump-xref-activate)
         (c-mode . (lambda ()
                    (setq-local dumb-jump-force-searcher 'ag
                               dumb-jump-functions-only t))))
  :bind (:map dumb-jump-mode-map
              ("C-M-g" . nil)
              ("C-M-p" . nil)
              ("C-M-q" . nil)
              ("C-c C-l" . xref-find-definitions)
              ("C-c C-b" . xref-pop-marker-stack)))

;; =============================================================================
;;                           Development Tools
;; =============================================================================

;; Completion
(use-package company
  :ensure t
  :hook (after-init . global-company-mode)
  :bind ([C-tab] . company-complete-common)
  :custom
  (company-minimum-prefix-length 2)
  (company-idle-delay 0.2)
  (company-dabbrev-downcase nil))

;; Compilation
(use-package compile
  :ensure nil
  :custom
  (compilation-scroll-output 'first-error)
  :commands (interrupt-and-recompile new-compilation-window-hook)
  :bind (("C-c c" . interrupt-and-recompile)
         ("C-c r" . recompile))
  :hook (compilation-mode . new-compilation-window-hook)
  :config
  (defun interrupt-and-recompile ()
    "Interrupt old compilation, if any, and recompile."
    (interactive)
    (let ((compilation-buffer (get-buffer "*compilation*")))
      (when compilation-buffer
        (ignore-errors
          (process-kill-without-query
           (get-buffer-process compilation-buffer)))
        (ignore-errors
          (kill-buffer compilation-buffer))))
    (recompile))

  (defun new-compilation-window-hook ()
    "Create a new window for compilation buffer if not already visible."
    (unless (get-buffer-window "*compilation*")
      (let ((compilation-window-height 15))
        (split-window-vertically (- (window-height) compilation-window-height)))))

  (setq compilation-exit-message-function
        (lambda (status code msg)
          (when (and (eq status 'exit) (zerop code))
            (let ((compilation-buffer (get-buffer "*compilation*")))
              (when compilation-buffer
                (bury-buffer compilation-buffer)
                (when-let ((window (get-buffer-window compilation-buffer)))
                  (delete-window window)))))
          (cons msg code))))

;; ANSI color support in compilation
(use-package ansi-color
  :ensure t
  :hook (compilation-filter . ansi-color-compilation-filter))

;; Ediff configuration
(setq ediff-split-window-function 'split-window-horizontally)

;; =============================================================================
;;                           Programming Languages
;; =============================================================================

;; Shell scripting
(use-package sh-script
  :ensure nil
  :config
  (setq sh-basic-offset 2
        sh-indentation 2))

;; C/C++
(use-package cc-mode
  :ensure t
  :config
  (setq c-default-style "linux"
        c-basic-offset 4)

  ;; ACSL mode configuration
  (defconst acsl-keywords
    '("assert" "assigns" "ensures" "slevel" "slevel_merge" "requires")
    "List of ACSL keywords to highlight.")

  (defun acsl-comment ()
    "Return non-nil if we are in a C comment beginning with /*@ or //@."
    (and (nth 4 (syntax-ppss)) ; Inside a comment
         (or (and (eq (char-after (+ (nth 8 (syntax-ppss)) 2)) ?@)) ; Check for /*@
             (and (eq (char-after (+ (nth 8 (syntax-ppss)) 2)) ?@))))) ; Check for //@

  (defvar acsl-font-lock-keywords
    (let ((pre-match-form (lambda ()
                            (goto-char (match-beginning 0))
                            (match-end 0)))
          (find-annot (lambda (limit)
                        ;; Skip non-ACSL comments
                        (if (and (looking-at "//") (acsl-comment))
                            (re-search-forward "\n" limit 'e))
                        (while (and (not (acsl-comment)) (< (point) limit))
                          (re-search-forward "/[*/]" limit 'e))
                        (if (>= (point) limit)
                            nil
                          (let ((b (save-excursion
                                     (re-search-backward "/[*/]" (- (point) 2) t)
                                     (point))))
                            (re-search-forward "[*/]/\\|\n" limit 'e)
                            (re-search-backward "//" (- (point) 2) t) ; Don't recolor comments
                            (set-match-data (list b (point) (nth 2 (match-data t))))
                            t)))))
      (list
       `(,find-annot
         (0 'font-lock-doc-face t)
         (,(concat (regexp-opt acsl-keywords 'words) "") (,pre-match-form) nil
          (0 '(font-lock-doc-face :inherit bold) t)))))
    "Default highlighting for ACSL mode")

  (defun my-acsl-mode ()
    (font-lock-add-keywords nil acsl-font-lock-keywords))

  (defun my-cc-style ()
    "Set custom C/C++ style."
    (c-set-style "linux")
    (c-set-offset 'innamespace 0)
    (c-set-offset 'inextern-lang 0)
    (c-set-offset 'inline-open 0)
    (c-set-offset 'label '*)
    (c-set-offset 'case-label '*)
    (c-set-offset 'access-label '/)
    (setq c-basic-offset 4))

  (defun my-cc-clang-format-keys ()
    "Set custom keybindings for clang-format."
    (local-set-key (kbd "C-M-\\") 'clang-format-region))

  (defun my-cc-mode-setup ()
    "Setup function for C/C++ modes."
    (my-cc-style)
    (my-cc-clang-format-keys)
    (my-acsl-mode))

  (add-to-list 'auto-mode-alist '("\\.ipp\\'" . c++-mode))

  :hook ((c++-mode . my-cc-mode-setup)
         (c-mode . my-cc-mode-setup)))

(use-package clang-format
  :ensure t
  :after cc-mode)

;; OCaml Configuration
(use-package tuareg
  :ensure t
  :mode ("\\.ocamlinit\\'" . tuareg-mode))

(use-package dune
  :ensure t)

(use-package merlin
  :ensure t
  :hook ((tuareg-mode . merlin-mode)
         (merlin-mode . company-mode))
  :config
  (setq merlin-error-after-save nil
        merlin-command 'opam))

(use-package merlin-eldoc
  :ensure t
  :hook (tuareg-mode . merlin-eldoc-setup))

(use-package flycheck-ocaml
  :ensure t
  :after flycheck
  :config (flycheck-ocaml-setup))

;; =============================================================================
;;                           Markup and Config Languages
;; =============================================================================

;; Markdown
(use-package markdown-mode
  :ensure t
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  (setq markdown-command "multimarkdown"
        markdown-enable-math t
        markdown-enable-wiki-links t
        markdown-italic-underscore t
        markdown-asymmetric-header t
        markdown-gfm-additional-languages '("sh" "bash" "python" "c" "cpp")))

;; JSON
(use-package json-mode
  :ensure t
  :mode "\\.json\\'"
  :bind (:map json-mode-map
              ("C-M-\\" . json-reformat-region)))

;; YAML
(use-package yaml-mode
  :ensure t
  :mode "\\.ya?ml\\'")

;; Configuration files
(use-package conf-mode
  :ensure nil
  :mode
  (("/\\.[^/]*rc\\'" . conf-unix-mode)
   ("/config\\'" . conf-unix-mode)
   ("/gitconfig\\'" . conf-unix-mode)
   ("/tmux\\'" . conf-unix-mode)))

;; JavaScript/TypeScript
(use-package typescript-mode
  :ensure t
  :mode "\\.tsx?\\'"
  :config
  (setq typescript-indent-level 2))

;; Makefile
(use-package make-mode
  :ensure nil
  :mode "Makefile\\.inc\\'")

;; =============================================================================
;;                           Text and Spelling
;; =============================================================================

;; Spelling configuration
(use-package ispell
  :ensure nil
  :hook
  ((text-mode . ispell-minor-mode)
   (markdown-mode . #'my-ispell-setup))
  :config
  (when (executable-find "hunspell")
    (setq ispell-program-name "hunspell"
          ispell-really-hunspell t
          ispell-dictionary "en_US")))

;; =============================================================================
;;                           Visual Enhancement
;; =============================================================================

;; Whitespace visualization
(use-package whitespace
  :ensure nil
  :hook (prog-mode . whitespace-mode)
  :custom
  (whitespace-style '(face trailing empty lines-tail tabs tab-mark))
  (whitespace-space 'whitespace-hspace)
  (whitespace-line-column 80)
  :config
  ;; Set region highlight
  (set-face-attribute 'region nil :background "SlateGray1")

  ;; Custom whitespace faces
  (custom-set-faces
   '(whitespace-empty ((t (:foreground "firebrick" :background "SlateGray1"))))
   '(whitespace-hspace ((t (:foreground "white" :background "red"))))
   '(whitespace-indentation ((t (:foreground "firebrick" :background "beige"))))
   '(whitespace-line ((t (:foreground "black" :background "red"))))
   '(whitespace-newline ((t (:foreground "orange" :background "blue"))))
   '(whitespace-space ((t (:bold t :foreground "gray75"))))
   '(whitespace-space-after-tab ((t (:foreground "black" :background "green"))))
   '(whitespace-space-before-tab ((t (:foreground "black" :background "DarkOrange"))))
   '(whitespace-tab ((t (:foreground "red"))))
   '(whitespace-trailing ((t (:foreground "red" :background "yellow"))))))

;; Line numbers
(use-package display-line-numbers
  :ensure nil
  :hook (prog-mode . display-line-numbers-mode)
  :config
  (setq display-line-numbers-width 4
        display-line-numbers-widen t))

;; =============================================================================
;;                           Final Configuration
;; =============================================================================

;; Keep custom variables separate
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

(provide 'init)
;;; init.el ends here
