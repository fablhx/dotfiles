;; =============================================================================
;;                             Package Management
;; =============================================================================

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)

;; =============================================================================
;;                           Custom Functions
;; =============================================================================

;; Navigation Functions
(defun my-pop-local-mark-ring ()
  "Pop to the local mark ring."
  (interactive)
  (set-mark-command t))

;; Window Management Functions
(defun my-kill-last-opened-buffer ()
  "Kill the last opened buffer and its window (useful after grep)."
  (interactive)
  (let ((win-curr (selected-window))
        (win-other (next-window)))
    (select-window win-other)
    (kill-buffer-and-window)
    (select-window win-curr)))

;; Text Manipulation Functions
(defun renumber-list (start end &optional num)
  "Renumber the list items in the current START..END region.
If optional prefix arg NUM is given, start numbering from that number
instead of 1."
  (interactive "*r\np")
  (save-excursion
    (goto-char start)
    (setq num (or num 1))
    (save-match-data
      (while (re-search-forward "^\\(-* *\\)\\([0-9]+\\)" end t)
        (replace-match (concat (match-string 1) (number-to-string num)))
        (setq num (1+ num))))))

;; Line Operations
(defun join-next-line ()
  "Join next line to the end of current line."
  (interactive)
  (save-excursion
    (move-end-of-line nil)
    (kill-line)
    (just-one-space)))

;; Text Processing
(defun sort-ilines ()
  "Sort lines ignoring case."
  (interactive)
  (defvar sort-fold-case)
  (let ((sort-fold-case t))
    (call-interactively 'sort-lines)))

;; =============================================================================
;;                           Core Emacs Settings
;; =============================================================================

(use-package emacs
  :ensure nil
  :init
  ;; Unset unwanted keybinding
  (global-unset-key (kbd "C-z"))

  :bind
  ;; Function key bindings
  ([f1] . comment-dwim)
  ([f2] . whitespace-mode)
  ;; [f3] => see ag
  ([f4] . my-pop-local-mark-ring)
  ([(shift f4)] . pop-global-mark)
  ([f5] . compile)
  ([f6] . interrupt-and-recompile)
  ([f7] . next-error)
  ([f8] . flycheck-mode)
  ([f12] . enlarge-window)

  ;; Window management with auto-balancing
  ("C-x 2" . (lambda ()
               (interactive)
               (split-window-below)
               (balance-windows)))
  ("C-x 3" . (lambda ()
               (interactive)
               (split-window-right)
               (balance-windows)))
  ("C-x 0" . (lambda ()
               (interactive)
               (delete-window)
               (balance-windows)))

  :config
  ;; Path configuration
  (setq-default
   load-path (cons (expand-file-name "~/.emacs.d/elpa") load-path))

  ;; Editor behavior
  (setq-default indent-tabs-mode nil)  ; Use spaces instead of tabs
  (line-number-mode t)                 ; Show line numbers
  (column-number-mode t)               ; Show column numbers
  (menu-bar-mode t)                    ; Show menu bar
  (tool-bar-mode -1)                   ; Hide tool bar
  (transient-mark-mode t)              ; Highlight selection
  (delete-selection-mode t)            ; Delete selected text
  (fset 'yes-or-no-p 'y-or-n-p)        ; Use y/n instead of yes/no
  (global-auto-revert-mode t)          ; Auto reload changed files

  ;; Various settings
  (setq
   Buffer-menu-name-width 30
   fill-nobreak-predicate '(fill-french-nobreak-p)
   mouse-yank-at-point nil
   read-file-name-completion-ignore-case t
   require-final-newline t
   search-whitespace-regexp nil
   query-replace-highlight t)

  ;; Custom variables
  (custom-set-variables
   '(inhibit-startup-echo-area-message t)
   '(inhibit-startup-message t)
   '(make-backup-files nil)
   '(ring-bell-function 'ignore)
   '(save-abbrevs nil)
   '(search-highlight t))

  ;; Custom keybindings through minor mode
  (defvar my-keys-minor-mode-map
    (let ((map (make-sparse-keymap)))
      ;; Window movement
      (define-key map (kbd "M-<left>") 'windmove-left)
      (define-key map (kbd "M-<right>") 'windmove-right)
      (define-key map (kbd "M-<up>") 'windmove-up)
      (define-key map (kbd "M-<down>") 'windmove-down)

      ;; Text operations
      (define-key map (kbd "C-c w d") 'delete-trailing-whitespace)
      (define-key map (kbd "C-x C-k") 'my-kill-last-opened-buffer)
      (define-key map (kbd "C-c C-q") 'gen-quote-word)
      (define-key map (kbd "C-<delete>") 'join-next-line)
      (define-key map (kbd "C-c C-s") 'sort-ilines)

      map)
    "my-keys-minor-mode keymap.")

  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    :init-value t
    :lighter " my-keys")

  (my-keys-minor-mode t)

  (define-globalized-minor-mode global-my-keys-minor-mode my-keys-minor-mode
    (lambda () (my-keys-minor-mode 1)))
  (global-my-keys-minor-mode 1))

;; =============================================================================
;;                           Search and Navigation
;; =============================================================================

;; Silver Searcher integration
(use-package ag
  :ensure t
  :bind
  ([f3] . ag)
  ([(shift f3)] . ag-project))

;; Parenthesis handling
(use-package paren
  :ensure t
  :config
  (show-paren-mode t)
  (custom-set-variables
   '(blink-matching-paren t)
   '(blink-matching-paren-on-screen t)
   '(show-paren-style 'expression)
   '(blink-matching-paren-dont-ignore-comments t)))

;; Multiple cursors
(use-package multiple-cursors
  :ensure t
  :bind (("C-c e l" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C->" . mc/mark-all-like-this)))

;; Search with multiple cursors
(use-package phi-search
  :ensure t
  :config
  (add-hook 'multiple-cursors-mode-enabled-hook
            (lambda ()
              (interactive)
              (global-set-key (kbd "C-s") 'phi-search)
              (global-set-key (kbd "C-r") 'phi-search-backward)))
  (add-hook 'multiple-cursors-mode-disabled-hook
            (lambda ()
              (interactive)
              (global-set-key (kbd "C-s") 'isearch-forward)
              (global-set-key (kbd "C-r") 'isearch-backward))))

;; Jump to definitions
(use-package dumb-jump
  :ensure t
  :config
  (setq dumb-jump-project-denoters
        '(".dumbjump" ".projectile" ".git" ".hg" ".fslckout"
          ".bzr" "_darcs" ".svn" "PkgInfo" "-pkg.el"))
  (setq dumb-jump-prefer-searcher 'ag)
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :hook ((prog-mode . dumb-jump-mode)
         (c-mode . (lambda ()
                    (setq-local dumb-jump-force-searcher 'ag
                               dumb-jump-functions-only t))))
  :bind (:map dumb-jump-mode-map
              ("C-M-g" . nil)
              ("C-M-p" . nil)
              ("C-M-q" . nil)
              ("C-c C-l" . xref-find-definitions)
              ("C-c C-b" . xref-pop-marker-stack)))

;; =============================================================================
;;                           Development Tools
;; =============================================================================

;; Completion
(use-package company
  :ensure t
  :hook (after-init . global-company-mode)
  :bind ([C-tab] . company-complete-common)
  :custom
  (company-minimum-prefix-length 2)
  (company-idle-delay 0.2)
  (company-dabbrev-downcase nil))

;; Compilation
(use-package compile
  :ensure nil
  :custom
  (compilation-scroll-output 'first-error)
  :commands (interrupt-and-recompile new-compilation-window-hook)
  :bind (("C-c c" . interrupt-and-recompile)
         ("C-c r" . recompile))
  :hook (compilation-mode . new-compilation-window-hook)
  :config
  (defun interrupt-and-recompile ()
    "Interrupt old compilation, if any, and recompile."
    (interactive)
    (let ((compilation-buffer (get-buffer "*compilation*")))
      (when compilation-buffer
        (ignore-errors
          (process-kill-without-query
           (get-buffer-process compilation-buffer)))
        (ignore-errors
          (kill-buffer compilation-buffer))))
    (recompile))

  (defun new-compilation-window-hook ()
    "Create a new window for compilation buffer if not already visible."
    (unless (get-buffer-window "*compilation*")
      (let ((compilation-window-height 15))
        (split-window-vertically (- (window-height) compilation-window-height)))))

  (setq compilation-exit-message-function
        (lambda (status code msg)
          (when (and (eq status 'exit) (zerop code))
            (let ((compilation-buffer (get-buffer "*compilation*")))
              (when compilation-buffer
                (bury-buffer compilation-buffer)
                (when-let ((window (get-buffer-window compilation-buffer)))
                  (delete-window window)))))
          (cons msg code))))

;; ANSI color support in compilation
(use-package ansi-color
  :ensure t
  :hook (compilation-filter . ansi-color-compilation-filter))

;; Ediff configuration
(setq ediff-split-window-function 'split-window-horizontally)

;; =============================================================================
;;                           Programming Languages
;; =============================================================================

;; Shell scripting
(setq-default sh-basic-offset 2
              sh-indentation 2)

;; C/C++
(use-package cc-mode
  :ensure t
  :config
  (setq c-default-style "linux"
        c-basic-offset 4)

  ;; ACSL mode configuration
  (defconst acsl-keywords
    '("assert" "assigns" "ensures" "slevel" "slevel_merge" "requires")
    "List of ACSL keywords to highlight.")

  (defface acsl-bold-face
    '((t (:weight bold)))
    "Face for highlighting ACSL keywords in bold.")

  (defun acsl-comment-p ()
    "Return non-nil if the current comment starts with `/*@` or `//@`."
    (save-excursion
      (let ((beg (nth 8 (syntax-ppss))))
        (when beg
          (goto-char beg)
          (or (looking-at "/*@")
              (looking-at "//@"))))))

  (defun my-acsl-mode ()
    "Highlight ACSL keywords in C/C++ comments that start with `/*@` or `//@` in bold."
    (font-lock-add-keywords nil
                           `((,(concat "\\<\\(" (regexp-opt acsl-keywords 'words) "\\)\\>")
                              (0 'acsl-bold-face prepend
                                 (lambda ()
                                   (when (acsl-comment-p)
                                     t)))))))

  (defun my-cc-style ()
    "Set custom C/C++ style."
    (c-set-style "linux")
    (c-set-offset 'innamespace 0)
    (c-set-offset 'inextern-lang 0)
    (c-set-offset 'inline-open 0)
    (c-set-offset 'label '*)
    (c-set-offset 'case-label '*)
    (c-set-offset 'access-label '/)
    (setq c-basic-offset 4))

  (defun my-cc-clang-format-keys ()
    "Set custom keybindings for clang-format."
    (local-set-key (kbd "C-M-\\") 'clang-format-region))

  (defun my-cc-mode-setup ()
    "Setup function for C/C++ modes."
    (my-cc-style)
    (my-cc-clang-format-keys)
    (my-acsl-mode))

  ;; Additional file associations
  (add-to-list 'auto-mode-alist '("\\.ipp\\'" . c++-mode))

  :hook ((c++-mode . my-cc-mode-setup)
         (c-mode . my-cc-mode-setup)))

(use-package clang-format
  :ensure t
  :after cc-mode)

;; Python Configuration
(use-package flycheck
  :ensure t
  :hook (python-mode . flycheck-mode)
  :config
  (when (executable-find "pylint3")
    (setq flycheck-python-pylint-executable "pylint3"))
  (setq flycheck-python-mypy-cache-dir "/dev/null"))

;; OCaml Configuration
(use-package tuareg
  :ensure t
  :mode ("\\.ocamlinit\\'" . tuareg-mode))

(use-package dune
  :ensure t)

(use-package merlin
  :ensure t
  :hook ((tuareg-mode-hook . merlin-mode)
         (merlin-mode-hook . company-mode))
  :config (setq merlin-error-after-save nil))

(use-package merlin-eldoc
  :ensure t
  :hook (tuareg-mode . merlin-eldoc-setup))

(use-package flycheck-ocaml
  :ensure t
  :config (flycheck-ocaml-setup))

;; =============================================================================
;;                           Markup and Config Languages
;; =============================================================================

;; Markdown
(use-package markdown-mode
  :ensure t
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown"))

;; JSON
(use-package json-mode
  :ensure t
  :mode "\\.json\\'"
  :bind (:map json-mode-map
              ("C-M-\\" . json-reformat-region)))

;; Configuration files
(use-package conf-mode
  :ensure nil
  :mode
  (("/\\.[^/]*rc\\'" . conf-unix-mode)
   ("/config\\'" . conf-unix-mode)
   ("/gitconfig\\'" . conf-unix-mode)
   ("/tmux\\'" . conf-unix-mode)))

;; JavaScript/TypeScript
(use-package typescript-mode
  :ensure t
  :mode "\\.tsx\\'")

;; Makefile
(use-package make-mode
  :ensure nil
  :mode "Makefile\\.inc\\'")

;; =============================================================================
;;                           Text and Spelling
;; =============================================================================

;; Spelling configuration
(use-package ispell
  :ensure nil
  :config
  (when (executable-find "hunspell")
    (setq-default ispell-program-name "hunspell")
    (setq ispell-really-hunspell t))

  (defun custom-ispell ()
    "Skip regions from spell checking."
    (make-local-variable 'ispell-skip-region-alist)
    (add-to-list 'ispell-skip-region-alist '("`" . "`"))
    (add-to-list 'ispell-skip-region-alist '("^```" . "```$")))

  (add-hook 'markdown-mode-hook 'custom-ispell))

;; =============================================================================
;;                           Visual Enhancement
;; =============================================================================

;; Whitespace visualization
(use-package whitespace
  :ensure nil
  :hook (prog-mode . whitespace-mode)
  :custom
  (whitespace-style '(face trailing empty lines-tail tabs tab-mark))
  (whitespace-space 'whitespace-hspace)
  (whitespace-line-column 80)
  :config
  ;; Set region highlight
  (set-face-attribute 'region nil :background "SlateGray1")

  ;; Custom whitespace faces
  (custom-set-faces
   '(whitespace-empty ((t (:foreground "firebrick" :background "SlateGray1"))))
   '(whitespace-hspace ((t (:foreground "white" :background "red"))))
   '(whitespace-indentation ((t (:foreground "firebrick" :background "beige"))))
   '(whitespace-line ((t (:foreground "black" :background "red"))))
   '(whitespace-newline ((t (:foreground "orange" :background "blue"))))
   '(whitespace-space ((t (:bold t :foreground "gray75"))))
   '(whitespace-space-after-tab ((t (:foreground "black" :background "green"))))
   '(whitespace-space-before-tab ((t (:foreground "black" :background "DarkOrange"))))
   '(whitespace-tab ((t (:foreground "red"))))
   '(whitespace-trailing ((t (:foreground "red" :background "yellow"))))))

;; =============================================================================
;;                           Final Configuration
;; =============================================================================

;; Move custom-set-variables to a separate file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

(provide 'init)
;;; init.el ends here
