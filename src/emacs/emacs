;; =========================== Automatic packages ============================

;; Packages
(setq package-list
 '(company web-mode whitespace markdown-mode multiple-cursors dumb-jump))

;; Repository containing the packages
(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")))

;; Activate all the packages
(require 'package)
(package-initialize)

;; Fetch the list of packages available
(unless package-archive-contents (package-refresh-contents))

;; Install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))


;; ============================= Generic options =============================

;; Update search path
(setq-default load-path
  (cons (expand-file-name "~/.emacs.d/site-lisp") load-path))
(setq-default load-path
  (cons (expand-file-name "~/.emacs.d/elpa") load-path))

;; No startup message
(setq inhibit-startup-message t inhibit-startup-echo-area-message t)

;; Display line, column, date
(line-number-mode t)
(column-number-mode t)
;(display-time-mode t)
;(setq display-time-24hr-format t)

;; Display path file in frame title
(setq-default frame-title-format "%b (%f)")

;; Display menubar but not tool bar
(menu-bar-mode t)
(tool-bar-mode -1)

;; Highlight while search/replace
(setq search-highlight t query-replace-highlight t)

;; If search for 2 spaces, then really search 2 spaces
(setq search-whitespace-regexp -1)

;; Highlight selection
(transient-mark-mode t)

;; Delete selected text
(delete-selection-mode t)

;; Replace all yes-no questions into y-n
(fset 'yes-or-no-p 'y-or-n-p)

;; Copy/paste insert at the cursor point
(setq mouse-yank-at-point -1)

;; No backup files
(setq make-backup-files nil)
;(setq version-control -1)
;(setq backup-directory-alist (quote ((".*" . "~/.emacs_backups/"))))

;; Delete too old backups
;(setq delete-old-versions t)

;; Don't save abbrevs
(setq save-abbrevs nil)

;; Case insensitive completing file name
(setq read-file-name-completion-ignore-case t)

;; Filling paragraph for French
(setq fill-nobreak-predicate '(fill-french-nobreak-p))

;; Width buffer list
(setq Buffer-menu-name-width 30)

;; Workaround for dead-accent key
(require 'iso-transl)

;; Spelling
(when (executable-find "hunspell")
  (setq-default ispell-program-name "hunspell")
  (setq ispell-really-hunspell t))
(defun custom-ispell ()
  "Skip regions from spell checking."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '("`" . "`"))
  (add-to-list 'ispell-skip-region-alist '("^```" . "```$")))
(add-hook 'markdown-mode-hook 'custom-ispell)


;; ========================= Configuration for Mac ===========================

;; To type \{}[] with the normal keyboard combination
(defun mac_keyboard ()
  (interactive)
  (custom-set-variables
    '(ns-alternate-modifier (quote none))
    '(ns-command-modifier (quote meta))
    '(ns-control-modifier (quote none))
    '(ns-function-modifier (quote control)))

    ;; C-up/C-down to change paragraphs
    ;; Redefinition of the old commands
    (define-key
      (current-global-map) [remap scroll-up-command] 'forward-paragraph)
    (define-key
      (current-global-map) [remap scroll-down-command] 'backward-paragraph)

    ;; Redefinition of C-left/C-right for backward/forwad word
    (global-set-key (kbd "<home>") 'backward-word)
    (global-set-key (kbd "<end>") 'forward-word))

;; By OPAM user-setup for emacs
;; Tweak for problem on OS X where Emacs.app doesn't run the right
;; init scripts when invoking a sub-shell
(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to
  match that used by the user's shell.

This is particularly useful under Mac OSX, where GUI apps are not
started from a shell."
  (interactive)
  (let ((path-from-shell
         (replace-regexp-in-string
          "[ \t\n]*$" ""
          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))
         ))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

;; Auto load conf if on mac
(cond
  ((string-equal system-type "darwin")
    ;; Open emacs on top of the terminal
    (when window-system (x-focus-frame nil))

    (set-exec-path-from-shell-PATH)

    (mac_keyboard)))


;; =========================== Personal Shortcuts ============================

(defvar my-keys-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-<left>") 'windmove-left)
    (define-key map (kbd "M-<right>") 'windmove-right)
    (define-key map (kbd "M-<up>") 'windmove-up)
    (define-key map (kbd "M-<down>") 'windmove-down)
    map)
  "my-keys-minor-mode keymap.")

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  :init-value t
  :lighter " my-keys")

(my-keys-minor-mode t)

(global-set-key [f1] 'comment-dwim)
(global-set-key [f2] 'undo)
(global-set-key [f3] 'grep)
(global-set-key [f4] 'goto-line)
(global-set-key [f5] 'compile)
(global-set-key [f6] 'interrupt-and-recompile)
(global-set-key [f7] 'next-error)
(global-set-key [f8] 'caml-types-show-type)
(global-set-key [f9] 'flycheck-mode)
(global-set-key [f10] 'global-auto-revert-mode)
(global-set-key [f11] 'enlarge-window)
(global-set-key [f12] 'whitespace-mode)

;; Automatically resize widow when splitting
(global-set-key
 (kbd "C-x 2") (lambda () (interactive) (split-window-below) (balance-windows)))
(global-set-key
 (kbd "C-x 3") (lambda () (interactive) (split-window-right) (balance-windows)))
(global-set-key
 (kbd "C-x 0") (lambda () (interactive) (delete-window) (balance-windows)))

;; Delete trailing whitespaces
(global-set-key (kbd "C-c w d") 'delete-trailing-whitespace)


;; =============================== Development ===============================

;; Custom grep command
(setq grep-command "grep --color -nH -rI -e ")

;; Multiple cursors
(require 'multiple-cursors)
(global-set-key (kbd "C-c e l") 'mc/edit-lines)

;; Whitespace
(require 'whitespace)
(setq whitespace-style '(face trailing empty lines-tail tabs tab-mark))
(setq whitespace-space 'whitespace-hspace)
(setq whitespace-line-column 80)
;(add-hook 'prog-mode-hook 'whitespace-mode)
(global-whitespace-mode 1)
(custom-set-faces
 '(whitespace-empty ((t (:foreground "firebrick" :background "SlateGray1"))))
 '(whitespace-hspace ((t (:foreground "white" :background "red"))))
 '(whitespace-indentation ((t (:foreground "firebrick" :background "beige"))))
 '(whitespace-line ((t (:foreground "black" :background "red"))))
 '(whitespace-newline ((t (:foreground "orange" :background "blue"))))
 '(whitespace-space ((t (:bold t :foreground "gray75"))))
 '(whitespace-space-after-tab ((t (:foreground "black" :background "green"))))
 '(whitespace-space-before-tab ((t (:foreground "black" :background "DarkOrange"))))
 '(whitespace-tab ((t (:foreground "red"))))
 '(whitespace-trailing ((t (:foreground "red" :background "yellow")))))

;; Autocomplete
(add-hook 'after-init-hook 'global-company-mode)
(autoload 'company-mode "company" nil t)
(require 'company)
;(global-set-key (kbd "C-/") 'company-complete)
(global-set-key [C-tab] 'company-complete-common)
(setq company-dabbrev-downcase nil)

;; Delete spaces when saving in manual non programming mode
(add-hook 'markdown-mode-hook
          (lambda ()
            (add-to-list 'write-file-functions 'delete-trailing-whitespace)))

;; End file with new line
(setq require-final-newline t)

;; Replace tab with spaces
(setq-default indent-tabs-mode nil)

;; Show parenthesis
(require 'paren)
(show-paren-mode t)
(setq blink-matching-paren t)
(setq blink-matching-paren-on-screen t)
(setq show-paren-style 'expression)
(setq blink-matching-paren-dont-ignore-comments t)

;; Auto-kill compilation process and recompile
(defun interrupt-and-recompile ()
  "Interrupt old compilation, if any, and recompile."
  (interactive)
  (ignore-errors
    (process-kill-without-query
     (get-buffer-process
      (get-buffer "*compilation*"))))
  (ignore-errors
    (kill-buffer "*compilation*"))
  (recompile))

;; Always open a new compilation window to easily close it
(defun new-compilation-window-hook ()
  (progn
    (if (not (get-buffer-window "*compilation*"))
      (progn (split-window-vertically)))))
(add-hook 'compilation-mode-hook 'new-compilation-window-hook)

;; Close the compilation window if there was no error
(setq compilation-exit-message-function
  (lambda (status code msg)
    (when (and (eq status 'exit) (zerop code))
      (bury-buffer "*compilation*")
      (delete-window (get-buffer-window (get-buffer "*compilation*"))))
    ;; Always return the anticipated result of compilation-exit-message-function
    (cons msg code)))

;; Auto-scroll in the compilation buffer
(setq compilation-scroll-output 'first-error)

;; When compilation uses color, apply them if possible
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

;; Ediff
(setq ediff-split-window-function 'split-window-horizontally)

(defun renumber-list (start end &optional num)
  "Renumber the list items in the current START..END region.
   If optional prefix arg NUM is given, start numbering from that number
   instead of 1."
  (interactive "*r\np")
  (save-excursion
    (goto-char start)
    (setq num (or num 1))
    (save-match-data
      (while (re-search-forward "[0-9]+" end t)
        (replace-match (number-to-string num))
        (setq num (1+ num))))))

;; Custom vc-annotate to omit the file path
;; Can't make my mind if I want it or not
;;(defadvice vc-git-annotate-command (around vc-git-annotate-command activate)
;;  "Suppress Relative Path Of File From Git Blame Output"
;;  (let (name (file-relative-name file))
;;    (vc-git-command buf 'async nil "blame" "--date=short" rev "--" name)))

;; Dumb jump setup
(dumb-jump-mode)
; Remove all dumb-jump default key bindings
(define-key dumb-jump-mode-map (kbd "C-M-g") nil)
(define-key dumb-jump-mode-map (kbd "C-M-p") nil)
(define-key dumb-jump-mode-map (kbd "C-M-q") nil)
; Add my own
(define-key dumb-jump-mode-map (kbd "C-c C-l") 'dumb-jump-go-other-window)
(define-key dumb-jump-mode-map (kbd "C-c C-b") 'dumb-jump-back)
; Do not consider Makefile as possible project-denoters
(setq dumb-jump-project-denoters '(".dumbjump" ".projectile" ".git" ".hg"
                                   ".fslckout" ".bzr" "_darcs" ".svn"
                                   "PkgInfo" "-pkg.el"))


;; =================================== BASH ==================================

(setq-default sh-basic-offset 4)
(setq-default sh-indentation 4)


;; ================================== C/C++ ==================================

(setq-default c-default-style "linux")
(setq-default c-basic-offset 4)

(require 'cc-mode)

(defun my-cc-style()
  (c-set-style "linux")
  (c-set-offset 'innamespace '0)
  (c-set-offset 'inextern-lang '0)
  (c-set-offset 'inline-open '0)
  (c-set-offset 'label '*)
  (c-set-offset 'case-label '*)
  (c-set-offset 'access-label '/)
  (setq c-basic-offset 4))

(add-hook 'c++-mode-hook 'my-cc-style)

;; https://stackoverflow.com/questions/7189742/
;; change-color-of-code-within-if-0-endif-block-in-c-c-mode-in-emacs-21-3-1
;; (defun cpp-highlight-if-0/1 ()
;;   "Modify the face of text in between #if 0 ... #endif."
;;   (interactive)
;;   (setq cpp-known-face '(background-color . "dim gray"))
;;   (setq cpp-unknown-face 'default)
;;   (setq cpp-face-type 'dark)
;;   (setq cpp-known-writable 't)
;;   (setq cpp-unknown-writable 't)
;;   (setq cpp-edit-list
;;         '((#("1" 0 1
;;              (fontified nil))
;;            nil
;;            (background-color . "dim gray")
;;            both nil)
;;           (#("0" 0 1
;;              (fontified nil))
;;            (background-color . "dim gray")
;;            nil
;;            both nil)))
;;   (cpp-highlight-buffer t))

;; (defun jpk/c-mode-hook ()
;;   (cpp-highlight-if-0/1)
;;   (add-hook 'after-save-hook 'cpp-highlight-if-0/1 'append 'local))

;; (add-hook 'c-mode-common-hook 'jpk/c-mode-hook)


;; ================================= PYTHON ==================================

;(add-hook 'python-mode-hook 'flycheck-mode)
(add-hook 'python-mode-hook
          (lambda ()
            (setq flycheck-python-pylint-executable "~/.local/bin/pylint")))

;; Packages: elpy flycheck
;(elpy-enable)

;(when (require 'flycheck nil t)
;  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
;  (add-hook 'elpy-mode-hook 'flycheck-mode))


;; =================================== COQ ===================================

(setq auto-mode-alist (cons '("\\.v$" . coq-mode) auto-mode-alist))
(autoload 'coq-mode "coq" "Major mode for editing Coq vernacular." t)
(autoload 'run-coq "coq-inferior" "Run an inferior Coq process." t)
(autoload 'run-coq-other-window "inferior-coq"
  "Run an inferior Coq process in a new window." t)
(autoload 'run-coq-other-frame "inferior-coq"
  "Run an inferior Coq process in a new frame." t)
;(load-file "/usr/share/emacs/site-lisp/proofgeneral/generic/proof-site.el")


;; ================================== OCAML ==================================

(setq opam-share
  (substring
    (shell-command-to-string "opam config var share")
    0 -1))

(add-to-list 'load-path (format "%s/emacs/site-lisp/" opam-share))

(require 'caml-font)
(require 'merlin)

(autoload 'merlin-mode "merlin" "Merlin mode" t)
(add-hook 'caml-mode-hook 'merlin-mode)
(with-eval-after-load 'company
  (add-to-list 'company-backends 'merlin-company-backend))
(add-hook 'merlin-mode-hook 'company-mode)
(setq merlin-command 'opam)

(setq auto-mode-alist (cons '("\\.ml[iylp]?$" . caml-mode) auto-mode-alist))
(autoload 'caml-mode "caml" "Major mode for editing Caml code." t)
(autoload 'camldebug "camldebug" (interactive) "Debug caml mode")
(autoload 'run-caml "inf-caml" "Run an inferior Caml process." t)


;; ================================= GeneWeb =================================

(setq github_gw "~/work/git/extern/fablhx/geneweb/hd/etc/")

;; Load web-mode for templates
(require 'web-mode)
(add-to-list 'auto-mode-alist `(,(expand-file-name github_gw) . web-mode))


;; ================================ Markdown =================================

(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))


;; ========================== Various convinent mode ===========================

(add-to-list 'auto-mode-alist '("Makefile.inc\\'" . makefile-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/emacs\\'") . emacs-lisp-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/config\\'") . shell-script-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/gitconfig\\'") . shell-script-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/bashrc\\'") . shell-script-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/zshrc\\'") . shell-script-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/tmux\\'") . shell-script-mode))


;; TODO
(defun xah-insert-bracket-pair (@left-bracket @right-bracket &optional @wrap-method)
  "Insert brackets around selection, word, at point, and maybe move cursor in between.

 *left-bracket and *right-bracket are strings. *wrap-method must be either 'line or 'block. 'block means between empty lines.

• if there's a region, add brackets around region.
• If *wrap-method is 'line, wrap around line.
• If *wrap-method is 'block, wrap around block.
• if cursor is at beginning of line and its not empty line and contain at least 1 space, wrap around the line.
• If cursor is at end of a word or buffer, one of the following will happen:
 xyz▮ → xyz(▮)
 xyz▮ → (xyz▮)       if in one of the lisp modes.
• wrap brackets around word if any. e.g. xy▮z → (xyz▮). Or just (▮)

URL `http://ergoemacs.org/emacs/elisp_insert_brackets_by_pair.html'
Version 2017-01-17"
  (if (use-region-p)
      (progn ; there's active region
        (let (
              ($p1 (region-beginning))
              ($p2 (region-end)))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 2))))
    (progn ; no text selection
      (let ($p1 $p2)
        (cond
         ((eq @wrap-method 'line)
          (setq $p1 (line-beginning-position) $p2 (line-end-position))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 (length @left-bracket))))
         ((eq @wrap-method 'block)
          (save-excursion
            (progn
              (if (re-search-backward "\n[ \t]*\n" nil 'move)
                  (progn (re-search-forward "\n[ \t]*\n")
                         (setq $p1 (point)))
                (setq $p1 (point)))
              (if (re-search-forward "\n[ \t]*\n" nil 'move)
                  (progn (re-search-backward "\n[ \t]*\n")
                         (setq $p2 (point)))
                (setq $p2 (point))))
            (goto-char $p2)
            (insert @right-bracket)
            (goto-char $p1)
            (insert @left-bracket)
            (goto-char (+ $p2 (length @left-bracket)))))
         ( ;  do line. line must contain space
          (and
           (eq (point) (line-beginning-position))
           ;; (string-match " " (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
           (not (eq (line-beginning-position) (line-end-position))))
          (insert @left-bracket )
          (end-of-line)
          (insert  @right-bracket))
         ((and
           (or ; cursor is at end of word or buffer. i.e. xyz▮
            (looking-at "[^-_[:alnum:]]")
            (eq (point) (point-max)))
           (not (or
                 (string-equal major-mode "xah-elisp-mode")
                 (string-equal major-mode "emacs-lisp-mode")
                 (string-equal major-mode "lisp-mode")
                 (string-equal major-mode "lisp-interaction-mode")
                 (string-equal major-mode "common-lisp-mode")
                 (string-equal major-mode "clojure-mode")
                 (string-equal major-mode "xah-clojure-mode")
                 (string-equal major-mode "scheme-mode"))))
          (progn
            (setq $p1 (point) $p2 (point))
            (insert @left-bracket @right-bracket)
            (search-backward @right-bracket )))
         (t (progn
              ;; wrap around “word”. basically, want all alphanumeric, plus hyphen and underscore, but don't want space or punctuations. Also want chinese chars
              ;; 我有一帘幽梦，不知与谁能共。多少秘密在其中，欲诉无人能懂。
              (skip-chars-backward "-_[:alnum:]")
              (setq $p1 (point))
              (skip-chars-forward "-_[:alnum:]")
              (setq $p2 (point))
              (goto-char $p2)
              (insert @right-bracket)
              (goto-char $p1)
              (insert @left-bracket)
              (goto-char (+ $p2 (length @left-bracket))))))))))

(defun xah-insert-paren ()
  (interactive)
  (xah-insert-bracket-pair "(" ")") )

(defun xah-insert-bracket ()
  (interactive)
  (xah-insert-bracket-pair "[" "]") )

(defun xah-insert-brace ()
  (interactive)
  (xah-insert-bracket-pair "{" "}") )

(defun xah-insert-double-curly-quote“” () (interactive) (xah-insert-bracket-pair "“" "”") )
(defun xah-insert-curly-single-quote‘’ () (interactive) (xah-insert-bracket-pair "‘" "’") )
(defun xah-insert-single-angle-quote‹› () (interactive) (xah-insert-bracket-pair "‹" "›") )
(defun xah-insert-double-angle-quote«» () (interactive) (xah-insert-bracket-pair "«" "»") )
(defun xah-insert-ascii-double-quote () (interactive) (xah-insert-bracket-pair "\"" "\"") )
(defun xah-insert-ascii-single-quote () (interactive) (xah-insert-bracket-pair "'" "'") )
(defun xah-insert-emacs-quote () (interactive) (xah-insert-bracket-pair "`" "'") )
(defun xah-insert-corner-bracket「」 () (interactive) (xah-insert-bracket-pair "「" "」") )
(defun xah-insert-white-corner-bracket『』 () (interactive) (xah-insert-bracket-pair "『" "』") )
(defun xah-insert-angle-bracket〈〉 () (interactive) (xah-insert-bracket-pair "〈" "〉") )
(defun xah-insert-double-angle-bracket《》 () (interactive) (xah-insert-bracket-pair "《" "》") )
(defun xah-insert-white-lenticular-bracket〖〗 () (interactive) (xah-insert-bracket-pair "〖" "〗") )
(defun xah-insert-black-lenticular-bracket【】 () (interactive) (xah-insert-bracket-pair "【" "】") )
(defun xah-insert-tortoise-shell-bracket〔〕 () (interactive) (xah-insert-bracket-pair "〔" "〕") )

;; (global-set-key (kbd "<f8> 7") 'xah-insert-brace) ; {}
;; (global-set-key (kbd "<f8> 8") 'xah-insert-paren) ; ()
;; (global-set-key (kbd "<f8> 9") 'xah-insert-bracket) ; []

;; (global-set-key (kbd "M-7") 'xah-insert-brace) ; {}
;; (global-set-key (kbd "M-8") 'xah-insert-paren) ; ()
;; (global-set-key (kbd "M-9") 'xah-insert-bracket) ; []
