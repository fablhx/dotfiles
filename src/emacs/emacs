;; =========================== Automatic packages ============================

;; Packages
(setq package-list '(ag blacken company dumb-jump elpy flycheck
      flycheck-mypy haskell-mode json-mode lua-mode markdown-mode
      multiple-cursors phi-search smartparens web-mode whitespace
      xterm-color yaml-mode))

;; Repository containing the packages
(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")))

;; Activate all the packages
(require 'package)
(package-initialize)

;; Fetch the list of packages available
(unless package-archive-contents (package-refresh-contents))

;; Install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))


;; ============================= Generic options =============================

;; Update search path
(setq-default
 load-path (cons (expand-file-name "~/.emacs.d/elpa") load-path))

;; No startup message
(setq inhibit-startup-message t inhibit-startup-echo-area-message t)

;; Display line, column
(line-number-mode t)
(column-number-mode t)

;; Display menubar but not tool bar
(menu-bar-mode t)
(tool-bar-mode -1)

;; Highlight while search/replace
(setq search-highlight t query-replace-highlight t)

;; If search for 2 spaces, then really search 2 spaces
(setq search-whitespace-regexp -1)

;; Highlight selection
(transient-mark-mode t)

;; Delete selected text
(delete-selection-mode t)

;; Replace all yes-no questions into y-n
(fset 'yes-or-no-p 'y-or-n-p)

;; Copy/paste insert at the cursor point
(setq mouse-yank-at-point -1)

;; No backup files
(setq make-backup-files nil)

;; Don't save abbrevs
(setq save-abbrevs nil)

;; Case insensitive completing file name
(setq read-file-name-completion-ignore-case t)

;; Filling paragraph for French
(setq fill-nobreak-predicate '(fill-french-nobreak-p))

;; Width buffer list
(setq Buffer-menu-name-width 30)

;; End file with new line
(setq require-final-newline t)

;; Replace tab with spaces
(setq-default indent-tabs-mode nil)

;; Auto reload
(global-auto-revert-mode t)

;; Show parenthesis
(require 'paren)
(show-paren-mode t)
(setq blink-matching-paren t)
(setq blink-matching-paren-on-screen t)
(setq show-paren-style 'expression)
(setq blink-matching-paren-dont-ignore-comments t)

;; Workaround for dead-accent key
(require 'iso-transl)

;; Spelling
(when (executable-find "hunspell")
  (setq-default ispell-program-name "hunspell")
  (setq ispell-really-hunspell t))

(defun custom-ispell ()
  "Skip regions from spell checking."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '("`" . "`"))
  (add-to-list 'ispell-skip-region-alist '("^```" . "```$")))

(add-hook 'markdown-mode-hook 'custom-ispell)


;; ========================= Configuration for Mac ===========================

;; To type \{}[] with the normal keyboard combination
(defun mac_keyboard ()
  (interactive)
  (custom-set-variables
   '(ns-alternate-modifier (quote none))
   '(ns-command-modifier (quote meta))
   '(ns-control-modifier (quote none))
   '(ns-function-modifier (quote control)))

  ;; C-up/C-down to change paragraphs
  ;; Redefinition of the old commands
  (define-key
    (current-global-map) [remap scroll-up-command] 'forward-paragraph)
  (define-key
    (current-global-map) [remap scroll-down-command] 'backward-paragraph)

  ;; Redefinition of C-left/C-right for backward/forwad word
  (global-set-key (kbd "<home>") 'backward-word)
  (global-set-key (kbd "<end>") 'forward-word))

;; By OPAM user-setup for emacs
;; Tweak for problem on OS X where Emacs.app doesn't run the right
;; init scripts when invoking a sub-shell
(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to
  match that used by the user's shell.

This is particularly useful under Mac OSX, where GUI apps are not
started from a shell."
  (interactive)
  (let ((path-from-shell
         (replace-regexp-in-string
          "[ \t\n]*$" ""
          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))
         ))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

;; Auto load conf if on mac
(cond
 ((string-equal system-type "darwin")
  ;; Open emacs on top of the terminal
  (when window-system (x-focus-frame nil))
  (set-exec-path-from-shell-PATH)
  (mac_keyboard)))


;; =========================== Personal Shortcuts ============================

(defun my-pop-local-mark-ring ()
  (interactive)
  (set-mark-command t))

(defun my-wrap-next-error ()
  (interactive)
  (condition-case nil (next-error)
    (error (next-error 1 t))))

(global-set-key [f1] 'comment-dwim)
(global-set-key [f2] 'whitespace-mode)
(global-set-key [f3] 'ag)
(global-set-key [(shift f3)] 'ag-project)
(global-set-key [f4] 'my-pop-local-mark-ring)
(global-set-key [(shift f4)] 'pop-global-mark)

(global-set-key [f5] 'compile)
(global-set-key [f6] 'interrupt-and-recompile)
(global-set-key [f7] 'next-error)
(global-set-key [f8] 'flycheck-mode)

(global-set-key [f12] 'enlarge-window)

;; Automatically resize window when splitting
(global-set-key
 (kbd "C-x 2") (lambda () (interactive) (split-window-below) (balance-windows)))
(global-set-key
 (kbd "C-x 3") (lambda () (interactive) (split-window-right) (balance-windows)))
(global-set-key
 (kbd "C-x 0") (lambda () (interactive) (delete-window) (balance-windows)))

;; Kill the last opened window, e.g. after a grep.
(defun kill-last-opened-buffer ()
  "Kill the last opened buffer"
  (interactive)
  (let ((win-curr (selected-window))
        (win-other (next-window)))
    (select-window win-other)
    (kill-buffer-and-window)
    (select-window win-curr)))

;; Insert symbol left-bracket/right-bracket around word
(defun gen-insert-pair (@left-bracket @right-bracket)
  (if (use-region-p)
      (progn
        (let (($p1 (region-beginning))
              ($p2 (region-end)))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 2))))
    (progn
      (let ($p1 $p2)
        (progn
          (skip-chars-backward "-_[:alnum:]")
          (setq $p1 (point))
          (skip-chars-forward "-_[:alnum:]")
          (setq $p2 (point))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 (length @left-bracket))))))))

;; Handles the symbols I want
(defvar gen-quote-history nil)
(defun gen-quote-word (x)
  (interactive
   (list
    (read-string (format "Quote symbol (default %s): "
                         (or (car gen-quote-history) ""))
                 nil 'gen-quote-history
                 (car gen-quote-history)
                 'inherit-input-method)))
  (cond ((string-equal "(" x)  (gen-insert-pair "(" ")"))
        ((string-equal "[" x)  (gen-insert-pair "[" "]"))
        ((string-equal "{" x)  (gen-insert-pair "{" "}"))
        ((string-equal "<" x)  (gen-insert-pair "<" ">"))
        ((string-equal "{{" x) (gen-insert-pair "{{" "}}"))
        (t (gen-insert-pair x x))))

;; Join next line to the end of current line
(defun join-next-line ()
  (interactive)
  (save-excursion
    (move-end-of-line nil)
    (kill-line)
    (just-one-space)))

;; Insert output of shell command at point
(defvar my-insert-shell-command-history nil)
(defun my-insert-shell-command (cmd)
  (interactive
   (list
    (read-string (format "Run command (default %s): "
                         (or (car my-insert-shell-command-history) ""))
                 nil 'my-insert-shell-command-history
                 (car my-insert-shell-command-history)
                 'inherit-input-method)))
  (insert (shell-command-to-string cmd)))

(defvar my-keys-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-<left>") 'windmove-left)
    (define-key map (kbd "M-<right>") 'windmove-right)
    (define-key map (kbd "M-<up>") 'windmove-up)
    (define-key map (kbd "M-<down>") 'windmove-down)

    (define-key map (kbd "C-c w d") 'delete-trailing-whitespace)
    (define-key map (kbd "C-x C-k") 'kill-last-opened-buffer)

    (define-key map (kbd "C-c C-q") 'gen-quote-word)

    (define-key map (kbd "C-<delete>") 'join-next-line)

    map)
  "my-keys-minor-mode keymap.")

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  :init-value t
  :lighter " my-keys")

(my-keys-minor-mode t)


;; =============================== Development ===============================

;; Multiple cursors
(require 'multiple-cursors)
(global-set-key (kbd "C-c e l") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C->") 'mc/mark-all-like-this)

;; Isearch replacement that works with multiple cursors
(require 'phi-search)

;; Use phi-search only in multiple cursor-mode
(add-hook 'multiple-cursors-mode-enabled-hook
          (lambda ()
            (interactive)
            (global-set-key (kbd "C-s") 'phi-search)
            (global-set-key (kbd "C-r") 'phi-search-backward)))
(add-hook 'multiple-cursors-mode-disabled-hook
          (lambda ()
            (interactive)
            (global-set-key (kbd "C-s") 'isearch-forward)
            (global-set-key (kbd "C-r") 'isearch-backward)))

;; Whitespace
(require 'whitespace)
(setq whitespace-style '(face trailing empty lines-tail tabs tab-mark))
(setq whitespace-space 'whitespace-hspace)
(setq whitespace-line-column 80)
(add-hook 'prog-mode-hook 'whitespace-mode)
;(global-whitespace-mode 1)

;; Autocomplete
(add-hook 'after-init-hook 'global-company-mode)
(autoload 'company-mode "company" nil t)
(require 'company)
;(global-set-key (kbd "C-/") 'company-complete)
(global-set-key [C-tab] 'company-complete-common)
(setq company-dabbrev-downcase nil)

;; Delete spaces when saving in manual non programming mode
(defun my-txt-trailing-whitespace ()
  (unless (derived-mode-p 'prog-mode)
    (delete-trailing-whitespace)))
(add-hook 'before-save-hook 'my-txt-trailing-whitespace)

;; Auto-kill compilation process and recompile
(defun interrupt-and-recompile ()
  "Interrupt old compilation, if any, and recompile."
  (interactive)
  (ignore-errors
    (process-kill-without-query
     (get-buffer-process
      (get-buffer "*compilation*"))))
  (ignore-errors
    (kill-buffer "*compilation*"))
  (recompile))

;; Always open a new compilation window to easily close it
(defun new-compilation-window-hook ()
  (progn
    (if (not (get-buffer-window "*compilation*"))
        (progn (split-window-vertically)))))

(add-hook 'compilation-mode-hook 'new-compilation-window-hook)

;; Close the compilation window if there was no error
(setq compilation-exit-message-function
      (lambda (status code msg)
        (when (and (eq status 'exit) (zerop code))
          (bury-buffer "*compilation*")
          (delete-window (get-buffer-window (get-buffer "*compilation*"))))
        ;; Always return the anticipated result of compilation-exit-message-function
        (cons msg code)))

;; Auto-scroll in the compilation buffer
(setq compilation-scroll-output 'first-error)

;; When compilation uses color, apply them if possible
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))

(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

;; Ediff
(setq ediff-split-window-function 'split-window-horizontally)

(defun renumber-list (start end &optional num)
  "Renumber the list items in the current START..END region.
   If optional prefix arg NUM is given, start numbering from that number
   instead of 1."
  (interactive "*r\np")
  (save-excursion
    (goto-char start)
    (setq num (or num 1))
    (save-match-data
      (while (re-search-forward "^\\(-* *\\)\\([0-9]+\\)" end t)
        (replace-match (concat (match-string 1) (number-to-string num)))
        (setq num (1+ num))))))

;; Custom vc-annotate to omit the file path
;; Can't make my mind if I want it or not
;;(defadvice vc-git-annotate-command (around vc-git-annotate-command activate)
;;  "Suppress Relative Path Of File From Git Blame Output"
;;  (let (name (file-relative-name file))
;;    (vc-git-command buf 'async nil "blame" "--date=short" rev "--" name)))

;; Dumb jump setup
(dumb-jump-mode t)
;; Remove all dumb-jump default key bindings
(define-key dumb-jump-mode-map (kbd "C-M-g") nil)
(define-key dumb-jump-mode-map (kbd "C-M-p") nil)
(define-key dumb-jump-mode-map (kbd "C-M-q") nil)
;; Add my own
(define-key dumb-jump-mode-map (kbd "C-c C-l") 'dumb-jump-go-other-window)
(define-key dumb-jump-mode-map (kbd "C-c C-b") 'dumb-jump-back)
;; Do not consider Makefile as possible project-denoters
(setq dumb-jump-project-denoters '(".dumbjump" ".projectile" ".git" ".hg"
                                   ".fslckout" ".bzr" "_darcs" ".svn"
                                   "PkgInfo" "-pkg.el"))


;; =================================== BASH ==================================

(setq-default sh-basic-offset 4)
(setq-default sh-indentation 4)


;; ================================== C/C++ ==================================

(setq-default c-default-style "linux")
(setq-default c-basic-offset 4)

(require 'cc-mode)

(defun my-cc-style()
  (c-set-style "linux")
  (c-set-offset 'innamespace '0)
  (c-set-offset 'inextern-lang '0)
  (c-set-offset 'inline-open '0)
  (c-set-offset 'label '*)
  (c-set-offset 'case-label '*)
  (c-set-offset 'access-label '/)
  (setq c-basic-offset 4))

(add-hook 'c++-mode-hook 'my-cc-style)

(add-to-list 'auto-mode-alist '("\\.ipp\\'" . c++-mode))


;; ================================= PYTHON ==================================

(setq flycheck-python-pylint-executable "pylint3")
(setq flycheck-python-mypy-cache-dir "/dev/null")

(add-hook 'python-mode-hook 'flycheck-mode)

;; ================================== OCAML ==================================

(setq opam-share
      (substring
       (shell-command-to-string "opam config var share")
       0 -1))

(add-to-list 'load-path (format "%s/emacs/site-lisp/" opam-share))

(require 'caml-font)
(require 'merlin)

(autoload 'merlin-mode "merlin" "Merlin mode" t)
(add-hook 'caml-mode-hook 'merlin-mode)
(with-eval-after-load 'company
  (add-to-list 'company-backends 'merlin-company-backend))
(add-hook 'merlin-mode-hook 'company-mode)
(setq merlin-command 'opam)

(setq auto-mode-alist (cons '("\\.ml[iylp]?$" . caml-mode) auto-mode-alist))
(autoload 'caml-mode "caml" "Major mode for editing Caml code." t)
(autoload 'camldebug "camldebug" (interactive) "Debug caml mode")
(autoload 'run-caml "inf-caml" "Run an inferior Caml process." t)


;; ================================ Markdown =================================

(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))


;; ========================== Various convinent mode ===========================

(add-to-list 'auto-mode-alist '("Makefile.inc\\'" . makefile-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/emacs\\'") . emacs-lisp-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/config\\'") . shell-script-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/gitconfig\\'") . shell-script-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/bashrc\\'") . shell-script-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/zshrc\\'") . shell-script-mode))
(add-to-list 'auto-mode-alist `(,(expand-file-name "~/config/.*/tmux\\'") . shell-script-mode))


;; =================================== TIS ====================================
(add-to-list 'auto-mode-alist '("\\tis.*.config\\'" . json-mode))

(defun my-tis-prepare-mode ()
  (when (string-match "tis-prepare" buffer-file-name)
    (python-mode)))
(add-hook 'find-file-hook #'my-tis-prepare-mode)


;; ========================== CUSTOM FACES/VARIABLES ==========================

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(whitespace-empty ((t (:foreground "firebrick" :background "SlateGray1"))))
 '(whitespace-hspace ((t (:foreground "white" :background "red"))))
 '(whitespace-indentation ((t (:foreground "firebrick" :background "beige"))))
 '(whitespace-line ((t (:foreground "black" :background "red"))))
 '(whitespace-newline ((t (:foreground "orange" :background "blue"))))
 '(whitespace-space ((t (:bold t :foreground "gray75"))))
 '(whitespace-space-after-tab ((t (:foreground "black" :background "green"))))
 '(whitespace-space-before-tab ((t (:foreground "black" :background "DarkOrange"))))
 '(whitespace-tab ((t (:foreground "red"))))
 '(whitespace-trailing ((t (:foreground "red" :background "yellow")))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (phi-search yaml-mode xterm-color web-mode smartparens multiple-cursors
                markdown-mode lua-mode json-mode haskell-mode
                flycheck-pycheckers flycheck-mypy elpy dumb-jump blacken ag))))
