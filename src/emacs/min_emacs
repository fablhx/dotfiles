;; =========================== Automatic packages ============================

;; Packages
(setq package-list
 '(whitespace multiple-cursors))

;; Repository containing the packages
(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")))

;; Activate all the packages
(require 'package)
(package-initialize)

;; Fetch the list of packages available
(unless package-archive-contents (package-refresh-contents))

;; Install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))


;; ============================= Generic options =============================

;; Update search path
(setq-default load-path
  (cons (expand-file-name "~/.emacs.d/site-lisp") load-path))
(setq-default load-path
  (cons (expand-file-name "~/.emacs.d/elpa") load-path))

;; No startup message
(setq inhibit-startup-message t inhibit-startup-echo-area-message t)

;; Display line, column, date
(line-number-mode t)
(column-number-mode t)
(display-time-mode t)
(setq display-time-24hr-format t)

;; Display menubar but not tool bar
(menu-bar-mode t)
(tool-bar-mode -1)

;; No backup files
(setq make-backup-files nil)


;; =============================== Development ===============================

;; End file with new line
(setq require-final-newline t)

;; Replace tab with spaces
(setq-default indent-tabs-mode nil)

;; Whitespace
(require 'whitespace)
;(setq whitespace-style '(face trailing empty lines-tail tabs tab-mark))
(setq whitespace-style '(face trailing empty tabs tab-mark))
(setq whitespace-space 'whitespace-hspace)
;(setq whitespace-line-column 80)
(add-hook 'prog-mode-hook 'whitespace-mode)
;(global-whitespace-mode 1)
(custom-set-faces
 '(whitespace-empty ((t (:foreground "firebrick" :background "SlateGray1"))))
 '(whitespace-hspace ((t (:foreground "white" :background "red"))))
 '(whitespace-indentation ((t (:foreground "firebrick" :background "beige"))))
 '(whitespace-line ((t (:foreground "black" :background "red"))))
 '(whitespace-newline ((t (:foreground "orange" :background "blue"))))
 '(whitespace-space ((t (:bold t :foreground "gray75"))))
 '(whitespace-space-after-tab ((t (:foreground "black" :background "green"))))
 '(whitespace-space-before-tab ((t (:foreground "black" :background "DarkOrange"))))
 '(whitespace-tab ((t (:foreground "red"))))
 '(whitespace-trailing ((t (:foreground "red" :background "yellow")))))

;; Multiple cursors
(require 'multiple-cursors)
(global-set-key (kbd "C-c e l") 'mc/edit-lines)


;; =================================== BASH ==================================

(setq-default sh-basic-offset 4)
(setq-default sh-indentation 4)


;; ================================== C/C++ ==================================

(setq-default c-default-style "linux")
(setq-default c-basic-offset 4)

(require 'cc-mode)

(defun my-cc-style()
  (c-set-style "linux")
  (c-set-offset 'innamespace '0)
  (c-set-offset 'inextern-lang '0)
  (c-set-offset 'inline-open '0)
  (c-set-offset 'label '*)
  (c-set-offset 'case-label '*)
  (c-set-offset 'access-label '/)
  (setq c-basic-offset 4))

(add-hook 'c++-mode-hook 'my-cc-style)
