[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return

plugins=(
    compleat
    zsh-syntax-highlighting
    history-substring-search
)

source "${HOME}"/.oh-my-zsh/oh-my-zsh.sh

REPORTTIME=10
HISTSIZE=50000
SAVEHIST=50000

setopt append_history
setopt complete_in_word
setopt hist_expire_dups_first
setopt hist_find_no_dups
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_save_no_dups
setopt inc_append_history
setopt notify
setopt prompt_subst
setopt share_history

zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' verbose yes
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format "$fg[yellow]%B--- %d%b"
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format "$fg[red]No matches$reset_color"
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'

# TODO: Fix this! Do I really need zsh-syntax-highlighting
#
# This speeds up pasting w/ autosuggest
# https://github.com/zsh-users/zsh-autosuggestions/issues/238
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[path]=''

export ALTERNATE_EDITOR=""
export EDITOR='emacs';
export LESS="-RFX"

alias ls='ls --color=auto -v'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias tree='tree -C'

alias xclip='xclip -selection clipboard'

alias l='ls -lh'
alias ll='ls -lh'
alias lll='ls -lha'
alias la='ls -lhd .?*'
alias lt='ls -lht'

alias rm='rm -i'

alias xopen='xdg-open'

alias ocaml='rlwrap -pMagenta ocaml'

alias pretty_py='autopep8 --in-place --aggressive --aggressive'

function __emacs_client() {
    split_file_line=()
    for p in "$@"; do
        if [[ "$p" =~ "(.*):([0-9]+)$" ]]; then
            split_file_line+="+${match[2]}"
            split_file_line+="${match[1]}"
        else
            split_file_line+="$p"
        fi
    done
    # This check if I have already run an emacsclient --create-frame,
    # if yes, use the current frame, if no create a new frame.
    if emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" | grep -q t;
    then
        emacsclient -n "${split_file_line[@]}"
    else
        emacsclient -c -n "${split_file_line[@]}"
    fi
}

function __emacs() {
    split_file_line=()
    for p in "$@"; do
        if [[ "$p" =~ "(.*):([0-9]+)$" ]]; then
            split_file_line+="+${match[2]}"
            split_file_line+="${match[1]}"
        else
            split_file_line+="$p"
        fi
    done
    emacs "${split_file_line[@]}"
}

alias cedit='emacsclient -c -nw'
alias wedit='__emacs_client'
alias emacs='__emacs'
alias start_emacs='emacs --daemon'
alias stop_emacs='emacsclient -e "(kill-emacs)"'

# Optimized Git Prompt Function
__git_prompt() {
    local CACHE_DIR="/tmp/git_prompt_cache_$$"
    local CACHE_FILE="${CACHE_DIR}/${PWD//\//_}"
    local CACHE_TIMEOUT=2  # seconds

    # Create cache directory if it doesn't exist
    [[ ! -d "$CACHE_DIR" ]] && mkdir -p "$CACHE_DIR" 2>/dev/null

    # Check if cache is fresh
    if [[ -f "$CACHE_FILE" ]] && (( $(date +%s) - $(stat -c %Y "$CACHE_FILE" 2>/dev/null || stat -f %m "$CACHE_FILE" 2>/dev/null) < $CACHE_TIMEOUT )); then
        cat "$CACHE_FILE"
        return
    fi

    # Quick check if we're in a git repo
    local git_dir
    git_dir=$(git rev-parse --git-dir 2>/dev/null) || return

    # Colors
    local color_detached="%{\033[38;5;200m%}"
    local color_dirty="%{\033[38;5;240m%}"
    local color_clean="%{\033[38;5;22m%}"
    local color_behind="%{\033[38;5;250m%}"
    local color_ahead="%{\033[38;5;250m%}"
    local color_staged="%{\033[38;5;28m%}"
    local color_unmerged="%{\033[38;5;196m%}"
    local color_changed="%{\033[38;5;166m%}"
    local color_untracked="%{\033[38;5;172m%}"
    local color_stashed="%{\033[38;5;26m%}"
    local reset_color="%{\033[0m%}"

    # Set GIT_DIR to avoid repeated path resolution
    export GIT_DIR="$git_dir"
    local GIT_WORK_TREE="${git_dir%/.git}"
    [[ "$GIT_WORK_TREE" == "$git_dir" ]] && GIT_WORK_TREE="$(dirname "$git_dir")"
    export GIT_WORK_TREE

    # Initialize variables
    local branch="" detached="no" behind=0 ahead=0
    local staged=0 unmerged=0 changed=0 untracked=0 stashed=0

    # Get branch name fast
    branch=$(git symbolic-ref --short -q HEAD 2>/dev/null)

    if [[ -z "$branch" ]]; then
        # We're in detached HEAD state
        detached="yes"
        branch=$(git describe --exact-match --tags HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
    else
        # Get ahead/behind count in one command
        local upstream
        upstream=$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)" 2>/dev/null)

        if [[ -n "$upstream" ]]; then
            local ahead_behind
            ahead_behind=$(git rev-list --left-right --count "$upstream...HEAD" 2>/dev/null)

            if [[ -n "$ahead_behind" ]]; then
                behind=${ahead_behind%%[[:space:]]*}
                ahead=${ahead_behind##*[[:space:]]}
            fi
        fi
    fi

    # Get status information - use timeout to prevent hanging
    local git_status
    git_status=$(timeout 0.2s git status --porcelain=v2 2>/dev/null)

    # Process status with optimized counting
    if [[ -n "$git_status" ]]; then
        # Count staged, unstaged, and untracked files efficiently
        staged=$(echo "$git_status" | grep -c "^[12] [MADRCT].")
        unmerged=$(echo "$git_status" | grep -c "^[12] [U].\|^[12] .U\|^[12] AA\|^[12] DD")
        changed=$(echo "$git_status" | grep -c "^[12] .[MD]")
        untracked=$(echo "$git_status" | grep -c "^\?")
    fi

    # Get stash count directly
    stashed=$(git stash list --no-decorate 2>/dev/null | wc -l)

    # Set branch color based on repository state
    local color_branch
    if [[ "$detached" == "yes" ]]; then
        color_branch="$color_detached"
    elif [[ "$staged" -ne 0 || "$unmerged" -ne 0 || "$changed" -ne 0 || "$untracked" -ne 0 ]]; then
        color_branch="$color_dirty"
    else
        color_branch="$color_clean"
    fi

    # Build prompt string efficiently
    local git_prompt=" $color_branch$branch${reset_color}"

    [[ "$behind" -gt 0 ]] && git_prompt+=" $color_behind↓$behind${reset_color}"
    [[ "$ahead" -gt 0 ]] && git_prompt+=" $color_ahead↑$ahead${reset_color}"
    [[ "$staged" -gt 0 ]] && git_prompt+=" $color_staged•$staged${reset_color}"
    [[ "$unmerged" -gt 0 ]] && git_prompt+=" $color_unmerged$unmerged${reset_color}"
    [[ "$changed" -gt 0 ]] && git_prompt+=" $color_changed+$changed${reset_color}"
    [[ "$untracked" -gt 0 ]] && git_prompt+=" $color_untracked…$untracked${reset_color}"
    [[ "$stashed" -gt 0 ]] && git_prompt+=" $color_stashed⚑$stashed${reset_color}"

    # Save to cache and output
    echo "$git_prompt" | tee "$CACHE_FILE"

    # Clean up environment variables
    unset GIT_DIR GIT_WORK_TREE
}

# Function to clear git prompt cache when changing directories
__git_prompt_chpwd() {
    rm -f "/tmp/git_prompt_cache_$$/${PWD//\//_}" 2>/dev/null
}

# Add hook to clear cache when changing directories
autoload -U add-zsh-hook
add-zsh-hook chpwd __git_prompt_chpwd

__build_prompt() {
    PROMPT=$'%{\033[38;5;135m%}%n@%m%{\033[0m%} %4(c:…/:)%3c'
    test -z "$TIS_CHOOSE" || PROMPT+=$' %{\033[00;36m%}{${TIS_CHOOSE##*/}}%{\033[0m%}'
    PROMPT+="$(__git_prompt)"
    PROMPT+=$'%(0?.. %{\033[38;5;196m%}[%?]%{\033[0m%}) %# '
}

precmd() { __build_prompt; }
