[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return

plugins=(
    compleat
    zsh-syntax-highlighting
    history-substring-search
)

source "${HOME}"/.oh-my-zsh/oh-my-zsh.sh

REPORTTIME=10
HISTSIZE=50000
SAVEHIST=50000

setopt append_history
setopt complete_in_word
setopt hist_expire_dups_first
setopt hist_find_no_dups
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_save_no_dups
setopt inc_append_history
setopt notify
setopt prompt_subst
setopt share_history

zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' verbose yes
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format "$fg[yellow]%B--- %d%b"
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format "$fg[red]No matches$reset_color"
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'

# TODO: Fix this! Do I really need zsh-syntax-highlighting
#
# This speeds up pasting w/ autosuggest
# https://github.com/zsh-users/zsh-autosuggestions/issues/238
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[path]=''

export ALTERNATE_EDITOR=""
export EDITOR='emacs';
export LESS="-RFX"

alias ls='ls --color=auto -v'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias tree='tree -C'

alias xclip='xclip -selection clipboard'

alias l='ls -lh'
alias ll='ls -lh'
alias lll='ls -lha'
alias la='ls -lhd .?*'
alias lt='ls -lht'

alias rm='rm -i'

alias xopen='xdg-open'

alias ocaml='rlwrap -pMagenta ocaml'

alias pretty_py='autopep8 --in-place --aggressive --aggressive'

function __emacs_client() {
    split_file_line=()
    for p in "$@"; do
        if [[ "$p" =~ "(.*):([0-9]+)$" ]]; then
            split_file_line+="+${match[2]}"
            split_file_line+="${match[1]}"
        else
            split_file_line+="$p"
        fi
    done
    # This check if I have already run an emacsclient --create-frame,
    # if yes, use the current frame, if no create a new frame.
    if emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" | grep -q t;
    then
        emacsclient -n "${split_file_line[@]}"
    else
        emacsclient -c -n "${split_file_line[@]}"
    fi
}

function __emacs() {
    split_file_line=()
    for p in "$@"; do
        if [[ "$p" =~ "(.*):([0-9]+)$" ]]; then
            split_file_line+="+${match[2]}"
            split_file_line+="${match[1]}"
        else
            split_file_line+="$p"
        fi
    done
    emacs "${split_file_line[@]}"
}

alias cedit='emacsclient -c -nw'
alias wedit='__emacs_client'
alias emacs='__emacs'
alias start_emacs='emacs --daemon'
alias stop_emacs='emacsclient -e "(kill-emacs)"'

__git_prompt() {
    local branch="" detached="no" behind=0 ahead=0
    local staged=0 unmerged=0 changed=0 untracked=0 stashed=0
    local git_status fast_status

    # Get branch name quickly if possible
    fast_status=$(LANG=en_US git -C "$PWD" symbolic-ref --short -q HEAD 2>/dev/null)

    # Early return if not in a git repository
    if [[ -z "$fast_status" ]]; then
        git_status=$(LANG=en_US timeout 0.2s git -C "$PWD" rev-parse --is-inside-work-tree 2>/dev/null)
        [[ "$git_status" != "true" ]] && return
    fi

    # We're in a git repo, continue processing
    if [[ -n "$fast_status" ]]; then
        branch="$fast_status"
    else
        # We need to get the branch info from git status
        local ref_info
        ref_info=$(LANG=en_US git -C "$PWD" rev-parse --abbrev-ref HEAD 2>/dev/null)

        if [[ "$ref_info" == "HEAD" ]]; then
            # Detached HEAD - try to get tag or commit hash
            detached="yes"
            branch=$(LANG=en_US git -C "$PWD" describe --exact-match --tags HEAD 2>/dev/null)
            if [[ -z "$branch" ]]; then
                branch=$(LANG=en_US git -C "$PWD" rev-parse --short HEAD 2>/dev/null)
            fi
        else
            branch="$ref_info"
        fi
    fi

    # Get ahead/behind count directly with git rev-list, which is faster than parsing status
    if [[ "$detached" == "no" ]]; then
        local upstream
        upstream=$(git -C "$PWD" rev-parse --abbrev-ref "@{upstream}" 2>/dev/null)

        if [[ -n "$upstream" ]]; then
            local ahead_behind
            ahead_behind=$(git -C "$PWD" rev-list --left-right --count "@{upstream}...HEAD" 2>/dev/null)

            if [[ -n "$ahead_behind" ]]; then
                behind=$(echo "$ahead_behind" | awk '{print $1}')
                ahead=$(echo "$ahead_behind" | awk '{print $2}')
            fi
        fi
    fi

    # Get status info using porcelain v2 format
    git_status=$(LANG=en_US timeout 0.2s git -C "$PWD" status --porcelain=v2 2>/dev/null)

    if [[ -n "$git_status" ]]; then
        # Count staged, unmerged, changed and untracked files more efficiently
        # Parse only once with optimized logic for porcelain v2 format
        while IFS= read -r line; do
            local first_char="${line:0:1}"

            # Untracked files
            if [[ "$first_char" == "?" ]]; then
                ((untracked++))
                continue
            fi

            # Only process changed entries
            if [[ "$first_char" == "1" || "$first_char" == "2" ]]; then
                local xy="${line:2:2}"
                local x="${xy:0:1}"
                local y="${xy:1:1}"

                # Staged changes
                if [[ "$x" == "A" || "$x" == "M" || "$x" == "D" || "$x" == "R" || "$x" == "C" ]]; then
                    ((staged++))
                fi

                # Unstaged changes
                if [[ "$y" == "M" || "$y" == "D" ]]; then
                    ((changed++))
                fi

                # Unmerged conflicts
                if [[ "$x" == "U" || "$y" == "U" || "$xy" == "AA" || "$xy" == "DD" ]]; then
                    ((unmerged++))
                fi
            fi
        done <<< "$git_status"
    fi

    # Get stash count
    local stash_output
    stash_output=$(LANG=en_US git -C "$PWD" stash list --no-decorate 2>/dev/null)
    if [[ -n "$stash_output" ]]; then
        stashed=$(echo "$stash_output" | wc -l)
    fi

    # Colors (keeping original)
    local color_detached="%{\033[38;5;200m%}"
    local color_dirty="%{\033[38;5;240m%}"
    local color_clean="%{\033[38;5;22m%}"
    local color_branch="$color_clean"

    if [[ "$detached" == "yes" ]]; then
        color_branch="$color_detached"
    fi

    if [[ "$staged" -ne 0 || "$unmerged" -ne 0 || "$changed" -ne 0 || "$untracked" -ne 0 ]]; then
        color_branch="$color_dirty"
    fi

    local color_behind="%{\033[38;5;250m%}"
    local color_ahead="%{\033[38;5;250m%}"
    local color_staged="%{\033[38;5;28m%}"
    local color_unmerged="%{\033[38;5;196m%}"
    local color_changed="%{\033[38;5;166m%}"
    local color_untracked="%{\033[38;5;172m%}"
    local color_stashed="%{\033[38;5;26m%}"
    local reset_color="%{\033[0m%}"

    # Build prompt string - keeping original format
    local git_prompt=" $color_branch$branch${reset_color}"

    [[ "$behind" -ne 0 ]] && git_prompt+=" $color_behind↓ $behind${reset_color}"
    [[ "$ahead" -ne 0 ]] && git_prompt+=" $color_ahead↑$ahead${reset_color}"
    [[ "$staged" -ne 0 ]] && git_prompt+=" $color_staged•$staged${reset_color}"
    [[ "$unmerged" -ne 0 ]] && git_prompt+=" $color_unmerged$unmerged${reset_color}"
    [[ "$changed" -ne 0 ]] && git_prompt+=" $color_changed+$changed${reset_color}"
    [[ "$untracked" -ne 0 ]] && git_prompt+=" $color_untracked…$untracked${reset_color}"
    [[ "$stashed" -ne 0 ]] && git_prompt+=" $color_stashed⚑ $stashed${reset_color}"

    echo "$git_prompt"
}

__build_prompt() {
    PROMPT=$'%{\033[38;5;135m%}%n@%m%{\033[0m%} %4(c:…/:)%3c'
    test -z "$TIS_CHOOSE" || PROMPT+=$' %{\033[00;36m%}{${TIS_CHOOSE##*/}}%{\033[0m%}'
    PROMPT+="$(__git_prompt)"
    PROMPT+=$'%(0?.. %{\033[38;5;196m%}[%?]%{\033[0m%}) %# '
}

precmd() { __build_prompt; }
