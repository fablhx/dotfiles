[[ $TERM == "dumb" ]] && PS1='$ ' && return

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=50000
export HISTFILESIZE=50000
shopt -s histappend

export ALTERNATE_EDITOR=""
export EDITOR='emacs';
export LESS="-RFX"

alias ls='ls --color=auto -v'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias tree='tree -C'

alias xclip='xclip -selection clipboard'

alias l='ls -lh'
alias ll='ls -lh'
alias lll='ls -lha'
alias la='ls -lhd .?*'
alias lt='ls -lht'

alias rm='rm -i'

alias xopen='xdg-open'

alias ocaml='rlwrap -pMagenta ocaml'

function __emacs() {
    # This check if I have already run an emacsclient --create-frame,
    # if yes, use the current frame, if no create a new frame.
    if emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" | grep -q t;
    then
        emacsclient -n "$@"
    else
        emacsclient -c -n "$@"
    fi
}
alias cedit='emacsclient -c -nw'
alias wedit='__emacs'
alias start_emacs='emacs --daemon'
alias stop_emacs='emacsclient -e "(kill-emacs)"'

__git_prompt() {
    local git_status
    readarray -t git_status < <(LANG=en_US timeout 0.2s git -C "$PWD" status --branch --porcelain 2>/dev/null)

    # Workaround too large repo. WIP
    if [[ -z "${git_status[0]}" ]]
    then
        readarray -t git_status < <(LANG=en_US git -C "$PWD" symbolic-ref --short -q HEAD 2>/dev/null)
        if [[ -z "${git_status[0]}" ]]
        then
            return
        else
            # Just display the branch name
            echo " ⎇  ${git_status[0]}"
            return
        fi
    fi

    local branch detached behind ahead

    local sub_str tmp
    sub_str="## "
    git_status[0]="${git_status[0]#$sub_str}"

    if [[ "${git_status[0]}" == "No commits yet on master" ]]
    then
        branch="master"
        detached="no"
        behind=0
        ahead=0
    fi

    sub_str="Initial commit on "
    tmp="${git_status[0]#$sub_str}"
    if [[ "${git_status[0]}" != "$tmp" ]]
    then
        branch="$tmp"
        detached="no"
        behind=0
        ahead=0
    fi

    sub_str=" (no branch)"
    tmp="${git_status[0]%$sub_str}"
    if [[ "${git_status[0]}" != "$tmp" ]]
    then
        branch="$tmp"
        detached="yes"
        behind=0
        ahead=0
    fi

    tmp="${git_status[0]#*...}"
    if [[ "${git_status[0]}" != "$tmp" ]]
    then
        branch="${git_status[0]%$tmp}"
        branch="${branch%...}"
        detached="no"
        behind=0
        ahead=0
        sub_str_ahead="ahead "
        sub_str_behind="behind "
        tmp_ahead="${tmp#*$sub_str_ahead}"
        tmp_behind="${tmp#*$sub_str_behind}"
        if [[ "$tmp_ahead" != "$tmp" && "$tmp_behind" != "$tmp" ]]
        then
            ahead="${tmp_ahead%%,*}"
            behind="${tmp_behind%%]*}"
        else
            if [[ "$tmp_ahead" != "$tmp" ]]
            then
                ahead="${tmp_ahead%%]*}"
            fi
            if [[ "$tmp_behind" != "$tmp" ]]
            then
                behind="${tmp_behind%%]*}"
            fi
        fi
    fi

    if [[ -z "$branch" ]]
    then
        branch="${git_status[0]}"
        detached="no"
        behind=0
        ahead=0
    fi

    if [[ "$branch" == "HEAD" ]]
    then
        branch="$(LANG=en_US git -C "$PWD" describe --exact-match --tags HEAD 2>/dev/null)"
        if [[ -z "$branch" ]]
        then
            branch="$(LANG=en_US git -C "$PWD" rev-parse --short HEAD 2>/dev/null)"
        fi
    fi

    local staged unmerged changed untracked stashed

    staged=0
    unmerged=0
    changed=0
    untracked=0
    for line in "${git_status[@]:1}"
    do
        if [[ ("${line:0:1}" == "M" || "${line:0:1}" == "R" || "${line:0:1}" == "C") ||
              ("${line:0:1}" == "D" && "${line:1:1}" != "D") ||
              ("${line:0:1}" == "A" && "${line:1:1}" != "A") ]]
        then
            staged=$((staged+1))
        fi

        if [[ "${line:0:1}" == "U" || "${line:1:1}" == "U" ||
              "${line:0:2}" == "AA" || "${line:0:2}" == "DD" ]]
        then
            unmerged=$((unmerged+1))
        fi

        if [[ "${line:1:1}" == "M" ||
              ("${line:1:1}" == "D" && "${line:0:1}" != "D") ]]
        then
            changed=$((changed+1))
        fi

        if [[ "${line:0:1}" == "?" ]]
        then
            untracked=$((untracked+1))
        fi
    done

    readarray -t stashed < <(LANG=en_US git -C "$PWD" stash list --no-decorate 2>/dev/null)

    if [[ -z "${stashed[0]}" ]]
    then
        stashed=0
    else
        stashed="${#stashed[@]}"
    fi

    local color_detached="\[\033[38;5;200m\]"
    local color_dirty="\[\033[38;5;240m\]"
    local color_clean="\[\033[38;5;22m\]"
    local color_branch="$color_clean"
    if [[ "$detached" == "yes" ]]
    then
        color_branch="$color_detached"
    fi
    if [[ "$staged" -ne 0 || "$unmerged" -ne 0 ||
          "$changed" -ne 0 || "$untracked" -ne 0 ]];
    then
        color_branch="$color_dirty"
    fi
    local color_behind="\[\033[38;5;250m\]"
    local color_ahead="\[\033[38;5;250m\]"
    local color_staged="\[\033[38;5;28m\]"
    local color_unmerged="\[\033[38;5;196m\]"
    local color_changed="\[\033[38;5;166m\]"
    local color_untracked="\[\033[38;5;172m\]"
    local color_stashed="\[\033[38;5;26m\]"
    local reset_color="\[\033[0m\]"

    # symbols:
    # ⎇ branch
    # ↓ ↑ number of commit behind, ahead
    # • staged
    # + changed
    # … untracked
    # ⚑ stashed

    git_prompt=" $color_branch⎇  $branch${reset_color}"
    if [[ "$behind" -ne 0 ]]
    then
        git_prompt="$git_prompt $color_behind↓ $behind${reset_color}"
    fi
    if [[ "$ahead" -ne 0 ]]
    then
        git_prompt="$git_prompt $color_ahead↑$ahead${reset_color}"
    fi
    if [[ "$staged" -ne 0 ]]
    then
        git_prompt="$git_prompt $color_staged•$staged${reset_color}"
    fi
    if [[ "$unmerged" -ne 0 ]]
    then
        git_prompt="$git_prompt $color_unmerged$unmerged${reset_color}"
    fi
    if [[ "$changed" -ne 0 ]]
    then
        git_prompt="$git_prompt $color_changed+$changed${reset_color}"
    fi
    if [[ "$untracked" -ne 0 ]]
    then
        git_prompt="$git_prompt $color_untracked…$untracked${reset_color}"
    fi
    if [[ "$stashed" -ne 0 ]]
    then
        git_prompt="$git_prompt $color_stashed⚑ $stashed${reset_color}"
    fi

    echo "$git_prompt"
}

__build_prompt() {
    local exit_code="$?"
    PS1="\[\033[38;5;135m\]\u@\h\[\033[0m\] \w"
    test -z "$TIS_CHOOSE" || PS1+=$' \[\033[00;36m\]{${TIS_CHOOSE##*/}}\[\033[0m\]'
    PS1+="$(__git_prompt) "
    test "$exit_code" -eq 0 || PS1+="\[\033[38;5;196m\][$exit_code]\[\033[0m\] "
    PS1+="\$ "
}

PROMPT_DIRTRIM=3
PROMPT_COMMAND=__build_prompt
