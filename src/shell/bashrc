[[ $TERM == "dumb" ]] && PS1='$ ' && return

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=50000
export HISTFILESIZE=50000
shopt -s histappend

export ALTERNATE_EDITOR=""
export EDITOR='emacs';
export LESS="-RFX"

alias ls='ls --color=auto -v'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias tree='tree -C'

alias xclip='xclip -selection clipboard'

alias l='ls -lh'
alias ll='ls -lh'
alias lll='ls -lha'
alias la='ls -lhd .?*'
alias lt='ls -lht'

alias rm='rm -i'

alias xopen='xdg-open'

alias ocaml='rlwrap -pMagenta ocaml'

function __emacs_client() {
    split_file_line=()
    for p in "$@"; do
        if [[ "$p" =~ "(.*):([0-9]+)$" ]]; then
            split_file_line+="+${BASH_REMATCH[2]}"
            split_file_line+="${BASH_REMATCH[1]}"
        else
            split_file_line+="$p"
        fi
    done
    # This check if I have already run an emacsclient --create-frame,
    # if yes, use the current frame, if no create a new frame.
    if emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" | grep -q t;
    then
        emacsclient -n "${split_file_line[@]}"
    else
        emacsclient -c -n "${split_file_line[@]}"
    fi
}

function __emacs() {
    split_file_line=()
    for p in "$@"; do
        if [[ "$p" =~ "(.*):([0-9]+)$" ]]; then
            split_file_line+="+${BASH_REMATCH[2]}"
            split_file_line+="${BASH_REMATCH[1]}"
        else
            split_file_line+="$p"
        fi
    done
    emacs "${split_file_line[@]}"
}

alias cedit='emacsclient -c -nw'
alias wedit='__emacs_client'
alias emacs='__emacs'
alias start_emacs='emacs --daemon'
alias stop_emacs='emacsclient -e "(kill-emacs)"'

# Optimized Git Prompt Function for Bash
__git_prompt() {
    local CACHE_DIR="/tmp/git_prompt_cache_$$"
    local CACHE_FILE="${CACHE_DIR}/${PWD//\//_}"
    local CACHE_TIMEOUT=2  # seconds

    # Create cache directory if it doesn't exist
    [[ ! -d "$CACHE_DIR" ]] && mkdir -p "$CACHE_DIR" 2>/dev/null

    # Check if cache is fresh (bash compatible stat command)
    if [[ -f "$CACHE_FILE" ]]; then
        local cache_time file_time current_time
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            file_time=$(stat -f %m "$CACHE_FILE" 2>/dev/null)
        else
            # Linux and others
            file_time=$(stat -c %Y "$CACHE_FILE" 2>/dev/null)
        fi
        current_time=$(date +%s)

        if (( current_time - file_time < CACHE_TIMEOUT )); then
            cat "$CACHE_FILE"
            return
        fi
    fi

    # Quick check if we're in a git repo
    local git_dir
    git_dir=$(git rev-parse --git-dir 2>/dev/null) || return

    # Colors for bash (different from zsh format)
    local color_detached="\[\033[38;5;200m\]"
    local color_dirty="\[\033[38;5;240m\]"
    local color_clean="\[\033[38;5;22m\]"
    local color_behind="\[\033[38;5;250m\]"
    local color_ahead="\[\033[38;5;250m\]"
    local color_staged="\[\033[38;5;28m\]"
    local color_unmerged="\[\033[38;5;196m\]"
    local color_changed="\[\033[38;5;166m\]"
    local color_untracked="\[\033[38;5;172m\]"
    local color_stashed="\[\033[38;5;26m\]"
    local reset_color="\[\033[0m\]"

    # Set GIT_DIR to avoid repeated path resolution
    export GIT_DIR="$git_dir"
    local GIT_WORK_TREE="${git_dir%/.git}"
    [[ "$GIT_WORK_TREE" == "$git_dir" ]] && GIT_WORK_TREE="$(dirname "$git_dir")"
    export GIT_WORK_TREE

    # Initialize variables
    local branch="" detached="no" behind=0 ahead=0
    local staged=0 unmerged=0 changed=0 untracked=0 stashed=0

    # Get branch name fast
    branch=$(git symbolic-ref --short -q HEAD 2>/dev/null)

    if [[ -z "$branch" ]]; then
        # We're in detached HEAD state
        detached="yes"
        branch=$(git describe --exact-match --tags HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
    else
        # Get ahead/behind count in one command
        local upstream
        upstream=$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)" 2>/dev/null)

        if [[ -n "$upstream" ]]; then
            local ahead_behind
            ahead_behind=$(git rev-list --left-right --count "$upstream...HEAD" 2>/dev/null)

            if [[ -n "$ahead_behind" ]]; then
                # Parse ahead_behind differently for bash
                behind=$(echo "$ahead_behind" | awk '{print $1}')
                ahead=$(echo "$ahead_behind" | awk '{print $2}')
            fi
        fi
    fi

    # Get status information - use timeout to prevent hanging
    # Note: Use timeout if available, otherwise fall back
    local git_status
    if command -v timeout >/dev/null 2>&1; then
        git_status=$(timeout 0.2s git status --porcelain=v2 2>/dev/null)
    else
        # Fallback if timeout command is not available
        git_status=$(git status --porcelain=v2 2>/dev/null)
    fi

    # Process status with optimized counting
    if [[ -n "$git_status" ]]; then
        # Count staged, unstaged, and untracked files efficiently
        staged=$(echo "$git_status" | grep -c "^[12] [MADRCT].")
        unmerged=$(echo "$git_status" | grep -c "^[12] [U].\|^[12] .U\|^[12] AA\|^[12] DD")
        changed=$(echo "$git_status" | grep -c "^[12] .[MD]")
        untracked=$(echo "$git_status" | grep -c "^\?")
    fi

    # Get stash count directly
    stashed=$(git stash list --no-decorate 2>/dev/null | wc -l)
    # Trim whitespace for bash
    stashed=$(echo "$stashed" | tr -d '[:space:]')

    # Set branch color based on repository state
    local color_branch
    if [[ "$detached" == "yes" ]]; then
        color_branch="$color_detached"
    elif [[ "$staged" -ne 0 || "$unmerged" -ne 0 || "$changed" -ne 0 || "$untracked" -ne 0 ]]; then
        color_branch="$color_dirty"
    else
        color_branch="$color_clean"
    fi

    # Build prompt string efficiently
    local git_prompt=" $color_branch$branch${reset_color}"

    [[ "$behind" -gt 0 ]] && git_prompt+=" $color_behind↓$behind${reset_color}"
    [[ "$ahead" -gt 0 ]] && git_prompt+=" $color_ahead↑$ahead${reset_color}"
    [[ "$staged" -gt 0 ]] && git_prompt+=" $color_staged•$staged${reset_color}"
    [[ "$unmerged" -gt 0 ]] && git_prompt+=" $color_unmerged$unmerged${reset_color}"
    [[ "$changed" -gt 0 ]] && git_prompt+=" $color_changed+$changed${reset_color}"
    [[ "$untracked" -gt 0 ]] && git_prompt+=" $color_untracked…$untracked${reset_color}"
    [[ "$stashed" -gt 0 ]] && git_prompt+=" $color_stashed⚑$stashed${reset_color}"

    # Save to cache and output
    echo "$git_prompt" | tee "$CACHE_FILE"

    # Clean up environment variables
    unset GIT_DIR GIT_WORK_TREE
}

# Function to clear git prompt cache when changing directories
__git_prompt_cd() {
    \cd "$@" || return
    rm -f "/tmp/git_prompt_cache_$$/${PWD//\//_}" 2>/dev/null
}

# Create alias to override cd with our custom function
alias cd="__git_prompt_cd"

__build_prompt() {
    local exit_code="$?"
    PS1="\[\033[38;5;135m\]\u@\h\[\033[0m\] \w"
    test -z "$TIS_CHOOSE" || PS1+=$' \[\033[00;36m\]{${TIS_CHOOSE##*/}}\[\033[0m\]'
    PS1+="$(__git_prompt) "
    test "$exit_code" -eq 0 || PS1+="\[\033[38;5;196m\][$exit_code]\[\033[0m\] "
    PS1+="\$ "
}

PROMPT_DIRTRIM=3
PROMPT_COMMAND=__build_prompt
