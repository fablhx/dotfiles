__git_prompt() {
    local git_status
    readarray -t git_status < <(LANG=en_US git -C "$(pwd)" status --branch --porcelain 2>/dev/null)

    if [[ "${#git_status[@]}" -eq 0 ]]; then
        return
    fi

    local branch detached behind ahead
    local regexp

    regexp="^## "
    if [[ "${git_status[0]}" =~ $regexp ]]; then
        git_status[0]="${git_status[0]:3}"
    fi

    regexp="^No commits yet on master$"
    if [[ "${git_status[0]}" =~ $regexp ]]; then
        branch="master"
        detached="no"
        behind=0
        ahead=0
    fi

    regexp="^Initial commit on (.+)$"
    if [[ "${git_status[0]}" =~ $regexp ]]; then
        branch="${BASH_REMATCH[1]}"
        detached="no"
        behind=0
        ahead=0
    fi

    regexp="^(.+) \(no branch\)$"
    if [[ "${git_status[0]}" =~ $regexp ]]; then
        branch="${BASH_REMATCH[1]}"
        detached="yes"
        behind=0
        ahead=0
    fi

    regexp="^(.+?)\.\.\."
    if [[ "${git_status[0]}" =~ $regexp ]]; then
        branch="${BASH_REMATCH[1]}"
        local regexp_both="\[ahead (\d+), behind (\d+)\]$"
        local regexp_ahead="\[ahead (\d+)\]$"
        local regexp_behind="\[behind (\d+)\]$"
        if [[ "${git_status[0]}" =~ $regexp_both ]]; then
            detached="no"
            behind="${BASH_REMATCH[2]}"
            ahead="${BASH_REMATCH[1]}"
        elif [[ "${git_status[0]}" =~ $regexp_ahead ]]; then
            detached="no"
            behind=0
            ahead="${BASH_REMATCH[1]}"
        elif [[ "${git_status[0]}" =~ $regexp_behind ]]; then
            detached="no"
            behind="${BASH_REMATCH[1]}"
            ahead=0
        else
            detached="no"
            behind=0
            ahead=0
        fi
    fi

    if [[ -z "$branch" ]]; then
        branch="${git_status[0]}"
        detached="no"
        behind=0
        ahead=0
    fi

    if [[ "$branch" == "HEAD" ]]; then
        branch="$(LANG=en_US git -C "$(pwd)" rev-parse --short HEAD 2>/dev/null)"
    fi

    local staged unmerged changed untracked stashed

    staged=0
    unmerged=0
    changed=0
    untracked=0
    for line in "${git_status[@]:1}"; do
        if ([[ "${line:0:1}" == "M" || "${line:0:1}" == "R" || "${line:0:1}" == "C" ]]) ||
           ([[ "${line:0:1}" == "D" && "${line:1:1}" != "D" ]]) ||
           ([[ "${line:0:1}" == "A" && "${line:1:1}" != "A" ]]);
        then
            staged=$((staged+1))
        fi

        if [[ "${line:0:1}" == "U" || "${line:1:1}" == "U" ||
              "${line:0:2}" == "AA" || "${line:0:2}" == "DD" ]];
        then
            unmerged=$((unmerged+1))
        fi

        if [[ "${line:1:1}" == "M" ]] ||
           ([[ "${line:1:1}" == "D" && "${line:0:1}" != "D" ]]);
        then
            changed=$((changed+1))
        fi

        if [[ "${line:0:1}" == "?" ]];
        then
            untracked=$((untracked+1))
        fi
    done

    stashed="$(LANG=en_US git -C "$(pwd)" stash list --no-decorate 2>/dev/null)"
    stashed=${#stashed}

    local color_detached='\033[38;5;200m'
    local color_dirty='\033[38;5;240m'
    local color_clean='\033[38;5;22m'
    local color_branch="$color_clean"
    if [[ "$detached" == "yes" ]]; then
        color_branch="$color_detached"
    fi
    if [[ "$staged" -ne 0 || "$unmerged" -ne 0 ||
          "$changed" -ne 0 || "$untracked" -ne 0 ]];
    then
        color_branch="$color_dirty"
    fi
    local color_behind='\033[38;5;250m'
    local color_ahead='\033[38;5;250m'
    local color_staged='\033[38;5;28m'
    local color_unmerged='\033[38;5;196m'
    local color_changed='\033[38;5;166m'
    local color_untracked='\033[38;5;172m'
    local color_stashed='\033[38;5;26m'
    local reset_color='\033[0m'

    git_prompt=" $color_branch $branch${reset_color}"
    if [[ "$behind" -ne "0" ]]; then
        git_prompt="$git_prompt $color_behind↓ $behind${reset_color}"
    fi
    if [[ "$ahead" -ne "0" ]]; then
        git_prompt="$git_prompt $color_ahead↑$ahead${reset_color}"
    fi
    if [[ "$staged" -ne "0" ]]; then
        git_prompt="$git_prompt $color_staged•$staged${reset_color}"
    fi
    if [[ "$unmerged" -ne "0" ]]; then
        git_prompt="$git_prompt $color_unmerged$unmerged${reset_color}"
    fi
    if [[ "$changed" -ne "0" ]]; then
        git_prompt="$git_prompt $color_changed+$changed${reset_color}"
    fi
    if [[ "$untracked" -ne "0" ]]; then
        git_prompt="$git_prompt $color_untracked…$untracked${reset_color}"
    fi
    if [[ "$stashed" -ne "0" ]]; then
        git_prompt="$git_prompt $color_stashed⚑$stashed${reset_color}"
    fi

    echo -e "$git_prompt"
}

__git_prompt
unset __git_prompt
