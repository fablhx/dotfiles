[[ $TERM == "dumb" ]] && PS1='$ ' && return

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=50000
export HISTFILESIZE=50000
shopt -s histappend

export ALTERNATE_EDITOR=""
export EDITOR='emacs';
export LESS="-RFX"

alias ls='ls --color=auto -v'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias tree='tree -C'

alias xclip='xclip -selection clipboard'

alias l='ls -lh'
alias ll='ls -lh'
alias lll='ls -lha'
alias la='ls -lhd .?*'
alias lt='ls -lht'

alias rm='rm -i'

alias xopen='xdg-open'

alias ocaml='rlwrap -pMagenta ocaml'

function __emacs_client() {
    split_file_line=()
    for p in "$@"; do
        if [[ "$p" =~ "(.*):([0-9]+)$" ]]; then
            split_file_line+="+${BASH_REMATCH[2]}"
            split_file_line+="${BASH_REMATCH[1]}"
        else
            split_file_line+="$p"
        fi
    done
    # This check if I have already run an emacsclient --create-frame,
    # if yes, use the current frame, if no create a new frame.
    if emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" | grep -q t;
    then
        emacsclient -n "${split_file_line[@]}"
    else
        emacsclient -c -n "${split_file_line[@]}"
    fi
}

function __emacs() {
    split_file_line=()
    for p in "$@"; do
        if [[ "$p" =~ "(.*):([0-9]+)$" ]]; then
            split_file_line+="+${BASH_REMATCH[2]}"
            split_file_line+="${BASH_REMATCH[1]}"
        else
            split_file_line+="$p"
        fi
    done
    emacs "${split_file_line[@]}"
}

alias cedit='emacsclient -c -nw'
alias wedit='__emacs_client'
alias emacs='__emacs'
alias start_emacs='emacs --daemon'
alias stop_emacs='emacsclient -e "(kill-emacs)"'

__git_prompt() {
    local branch="" detached="no" behind=0 ahead=0
    local staged=0 unmerged=0 changed=0 untracked=0 stashed=0

    # Quick check if in a git repository
    local fast_status
    fast_status=$(LANG=en_US git -C "$PWD" symbolic-ref --short -q HEAD 2>/dev/null)

    # If fast check didn't find a branch, see if we're in a repo at all
    if [[ -z "$fast_status" ]]; then
        local git_repo
        git_repo=$(LANG=en_US git -C "$PWD" rev-parse --is-inside-work-tree 2>/dev/null)
        [[ "$git_repo" != "true" ]] && return
    fi

    # We're in a git repo, continue processing
    if [[ -n "$fast_status" ]]; then
        # Got branch name quickly, but need status info
        branch="$fast_status"
        local git_status
        git_status=$(LANG=en_US timeout 0.2s git -C "$PWD" status --branch --porcelain 2>/dev/null)

        # If status command failed or timed out, just return branch name
        if [[ -z "$git_status" ]]; then
            echo " \[\033[38;5;3m\]${branch}\[\033[0m\]"
            return
        fi
    else
        # Need to get all info from status command
        local git_status
        git_status=$(LANG=en_US timeout 0.2s git -C "$PWD" status --branch --porcelain 2>/dev/null)
        [[ -z "$git_status" ]] && return
    fi

    # Read the status output into an array, faster than multiple pipe operations
    local status_lines
    readarray -t status_lines <<< "$git_status"

    # Extract branch info from first line
    local first_line="${status_lines[0]#\#\# }"

    # Handle special cases for branch info
    if [[ "$first_line" == "No commits yet on master" ]]; then
        branch="master"
        detached="no"
    elif [[ "$first_line" == *"Initial commit on "* ]]; then
        branch="${first_line#Initial commit on }"
        detached="no"
    elif [[ "$first_line" == *" (no branch)"* ]]; then
        branch="${first_line% (no branch)}"
        detached="yes"
    elif [[ "$first_line" == *"..."* ]]; then
        # Extract branch name and ahead/behind count
        branch="${first_line%%...*}"
        local tracking_info="${first_line#*...}"

        # Extract ahead/behind counts more efficiently
        if [[ "$tracking_info" == *"ahead "* && "$tracking_info" == *"behind "* ]]; then
            ahead=$(echo "$tracking_info" | sed -n 's/.*ahead \([0-9]*\).*/\1/p')
            behind=$(echo "$tracking_info" | sed -n 's/.*behind \([0-9]*\).*/\1/p')
        elif [[ "$tracking_info" == *"ahead "* ]]; then
            ahead=$(echo "$tracking_info" | sed -n 's/.*ahead \([0-9]*\).*/\1/p')
        elif [[ "$tracking_info" == *"behind "* ]]; then
            behind=$(echo "$tracking_info" | sed -n 's/.*behind \([0-9]*\).*/\1/p')
        fi
    else
        branch="$first_line"
        detached="no"
    fi

    # Handle HEAD situation (detached HEAD)
    if [[ "$branch" == "HEAD" ]]; then
        detached="yes"
        branch=$(LANG=en_US git -C "$PWD" describe --exact-match --tags HEAD 2>/dev/null)
        [[ -z "$branch" ]] && branch=$(LANG=en_US git -C "$PWD" rev-parse --short HEAD 2>/dev/null)
    fi

    # Process file statuses - loop only once through all lines
    for ((i=1; i<${#status_lines[@]}; i++)); do
        local line="${status_lines[i]}"
        local first_char="${line:0:1}"
        local second_char="${line:1:1}"

        # Count staged files
        if [[ ("$first_char" == "M" || "$first_char" == "R" || "$first_char" == "C") ||
              ("$first_char" == "D" && "$second_char" != "D") ||
              ("$first_char" == "A" && "$second_char" != "A") ]]; then
            ((staged++))
        fi

        # Count unmerged files
        if [[ "$first_char" == "U" || "$second_char" == "U" ||
              "${line:0:2}" == "AA" || "${line:0:2}" == "DD" ]]; then
            ((unmerged++))
        fi

        # Count changed files
        if [[ "$second_char" == "M" ||
              ("$second_char" == "D" && "$first_char" != "D") ]]; then
            ((changed++))
        fi

        # Count untracked files
        if [[ "$first_char" == "?" ]]; then
            ((untracked++))
        fi
    done

    # Get stash count - do this only once
    local stash_output
    stash_output=$(LANG=en_US git -C "$PWD" stash list --no-decorate 2>/dev/null)
    [[ -n "$stash_output" ]] && stashed=$(echo "$stash_output" | wc -l)

    # Colors (unchanged from original)
    local color_detached="\[\033[38;5;200m\]"
    local color_dirty="\[\033[38;5;240m\]"
    local color_clean="\[\033[38;5;22m\]"
    local color_branch="$color_clean"

    [[ "$detached" == "yes" ]] && color_branch="$color_detached"

    if [[ "$staged" -ne 0 || "$unmerged" -ne 0 || "$changed" -ne 0 || "$untracked" -ne 0 ]]; then
        color_branch="$color_dirty"
    fi

    local color_behind="\[\033[38;5;250m\]"
    local color_ahead="\[\033[38;5;250m\]"
    local color_staged="\[\033[38;5;28m\]"
    local color_unmerged="\[\033[38;5;196m\]"
    local color_changed="\[\033[38;5;166m\]"
    local color_untracked="\[\033[38;5;172m\]"
    local color_stashed="\[\033[38;5;26m\]"
    local reset_color="\[\033[0m\]"

    # Build prompt string using more efficient string concatenation
    local git_prompt=" $color_branch$branch${reset_color}"

    [[ "$behind" -ne 0 ]] && git_prompt+=" $color_behind↓ $behind${reset_color}"
    [[ "$ahead" -ne 0 ]] && git_prompt+=" $color_ahead↑$ahead${reset_color}"
    [[ "$staged" -ne 0 ]] && git_prompt+=" $color_staged•$staged${reset_color}"
    [[ "$unmerged" -ne 0 ]] && git_prompt+=" $color_unmerged$unmerged${reset_color}"
    [[ "$changed" -ne 0 ]] && git_prompt+=" $color_changed+$changed${reset_color}"
    [[ "$untracked" -ne 0 ]] && git_prompt+=" $color_untracked…$untracked${reset_color}"
    [[ "$stashed" -ne 0 ]] && git_prompt+=" $color_stashed⚑ $stashed${reset_color}"

    echo "$git_prompt"
}

__build_prompt() {
    local exit_code="$?"
    PS1="\[\033[38;5;135m\]\u@\h\[\033[0m\] \w"
    test -z "$TIS_CHOOSE" || PS1+=$' \[\033[00;36m\]{${TIS_CHOOSE##*/}}\[\033[0m\]'
    PS1+="$(__git_prompt) "
    test "$exit_code" -eq 0 || PS1+="\[\033[38;5;196m\][$exit_code]\[\033[0m\] "
    PS1+="\$ "
}

PROMPT_DIRTRIM=3
PROMPT_COMMAND=__build_prompt
